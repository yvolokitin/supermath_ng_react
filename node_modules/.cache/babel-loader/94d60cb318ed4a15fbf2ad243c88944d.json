{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = autoPlay;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _shallowEqual = _interopRequireDefault(require(\"fbjs/lib/shallowEqual\"));\n\nvar _reactEventListener = _interopRequireDefault(require(\"react-event-listener\"));\n\nvar _reactSwipeableViewsCore = require(\"react-swipeable-views-core\");\n\nfunction autoPlay(MyComponent) {\n  var AutoPlay =\n  /*#__PURE__*/\n  function (_React$Component) {\n    (0, _inherits2.default)(AutoPlay, _React$Component);\n\n    function AutoPlay(props) {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, AutoPlay);\n      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AutoPlay).call(this, props));\n      _this.timer = null;\n      _this.state = {};\n\n      _this.handleInterval = function () {\n        var _this$props = _this.props,\n            children = _this$props.children,\n            direction = _this$props.direction,\n            onChangeIndex = _this$props.onChangeIndex,\n            slideCount = _this$props.slideCount;\n        var indexLatest = _this.state.index;\n        var indexNew = indexLatest;\n\n        if (direction === 'incremental') {\n          indexNew += 1;\n        } else {\n          indexNew -= 1;\n        }\n\n        if (slideCount || children) {\n          indexNew = (0, _reactSwipeableViewsCore.mod)(indexNew, slideCount || _react.default.Children.count(children));\n        } // Is uncontrolled\n\n\n        if (_this.props.index === undefined) {\n          _this.setState({\n            index: indexNew\n          });\n        }\n\n        if (onChangeIndex) {\n          onChangeIndex(indexNew, indexLatest);\n        }\n      };\n\n      _this.handleChangeIndex = function (index, indexLatest) {\n        // Is uncontrolled\n        if (_this.props.index === undefined) {\n          _this.setState({\n            index: index\n          });\n        }\n\n        if (_this.props.onChangeIndex) {\n          _this.props.onChangeIndex(index, indexLatest);\n        }\n      };\n\n      _this.handleSwitching = function (index, type) {\n        if (_this.timer) {\n          clearInterval(_this.timer);\n          _this.timer = null;\n        } else if (type === 'end') {\n          _this.startInterval();\n        }\n\n        if (_this.props.onSwitching) {\n          _this.props.onSwitching(index, type);\n        }\n      };\n\n      _this.handleVisibilityChange = function (e) {\n        if (e.target.hidden) {\n          clearInterval(_this.timer);\n        } else {\n          _this.startInterval();\n        }\n      };\n\n      _this.state.index = props.index || 0;\n      return _this;\n    }\n\n    (0, _createClass2.default)(AutoPlay, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.startInterval();\n      }\n    }, {\n      key: \"componentWillReceiveProps\",\n      value: function componentWillReceiveProps(nextProps) {\n        var index = nextProps.index;\n\n        if (typeof index === 'number' && index !== this.props.index) {\n          this.setState({\n            index: index\n          });\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        var shouldResetInterval = !(0, _shallowEqual.default)({\n          index: prevProps.index,\n          interval: prevProps.interval,\n          autoplay: prevProps.autoplay\n        }, {\n          index: this.props.index,\n          interval: this.props.interval,\n          autoplay: this.props.autoplay\n        });\n\n        if (shouldResetInterval) {\n          this.startInterval();\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        clearInterval(this.timer);\n      }\n    }, {\n      key: \"startInterval\",\n      value: function startInterval() {\n        var _this$props2 = this.props,\n            autoplay = _this$props2.autoplay,\n            interval = _this$props2.interval;\n        clearInterval(this.timer);\n\n        if (autoplay) {\n          this.timer = setInterval(this.handleInterval, interval);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props3 = this.props,\n            autoplay = _this$props3.autoplay,\n            direction = _this$props3.direction,\n            indexProp = _this$props3.index,\n            interval = _this$props3.interval,\n            onChangeIndex = _this$props3.onChangeIndex,\n            other = (0, _objectWithoutProperties2.default)(_this$props3, [\"autoplay\", \"direction\", \"index\", \"interval\", \"onChangeIndex\"]);\n        var index = this.state.index;\n\n        if (!autoplay) {\n          return _react.default.createElement(MyComponent, (0, _extends2.default)({\n            index: index,\n            onChangeIndex: onChangeIndex\n          }, other));\n        }\n\n        return _react.default.createElement(_reactEventListener.default, {\n          target: \"document\",\n          onVisibilityChange: this.handleVisibilityChange\n        }, _react.default.createElement(MyComponent, (0, _extends2.default)({\n          index: index,\n          onChangeIndex: this.handleChangeIndex,\n          onSwitching: this.handleSwitching\n        }, other)));\n      }\n    }]);\n    return AutoPlay;\n  }(_react.default.Component);\n\n  AutoPlay.propTypes = process.env.NODE_ENV !== \"production\" ? {\n    /**\n     * If `false`, the auto play behavior is disabled.\n     */\n    autoplay: _propTypes.default.bool,\n\n    /**\n     * @ignore\n     */\n    children: _propTypes.default.node,\n\n    /**\n     * This is the auto play direction.\n     */\n    direction: _propTypes.default.oneOf(['incremental', 'decremental']),\n\n    /**\n     * @ignore\n     */\n    index: _propTypes.default.number,\n\n    /**\n     * Delay between auto play transitions (in ms).\n     */\n    interval: _propTypes.default.number,\n\n    /**\n     * @ignore\n     */\n    onChangeIndex: _propTypes.default.func,\n\n    /**\n     * @ignore\n     */\n    onSwitching: _propTypes.default.func,\n\n    /**\n     * @ignore\n     */\n    slideCount: _propTypes.default.number\n  } : {};\n  AutoPlay.defaultProps = {\n    autoplay: true,\n    direction: 'incremental',\n    interval: 3000\n  };\n  return AutoPlay;\n}","map":null,"metadata":{},"sourceType":"script"}