{"ast":null,"code":"import _classCallCheck from\"C:\\\\private\\\\supermath_ng_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\private\\\\supermath_ng_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\private\\\\supermath_ng_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\private\\\\supermath_ng_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"C:\\\\private\\\\supermath_ng_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\private\\\\supermath_ng_react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React from'react';import{Dialog}from'@material-ui/core';import{generate_2digit_task_from_array}from\"./../halpers/functions\";import SMKeyBoard from\"./../keyboard/keyboard\";import SMCircles from\"./circles\";import'./twodigitgame.css';/*\r\n\r\n*/var TwoDigitGame=/*#__PURE__*/function(_React$Component){_inherits(TwoDigitGame,_React$Component);function TwoDigitGame(props){var _this;_classCallCheck(this,TwoDigitGame);_this=_possibleConstructorReturn(this,_getPrototypeOf(TwoDigitGame).call(this,props));_this.onDigit=_this.onDigit.bind(_assertThisInitialized(_this));_this.onOperator=_this.onOperator.bind(_assertThisInitialized(_this));_this.onKeyboard=_this.onKeyboard.bind(_assertThisInitialized(_this));/*\r\n            {'number_1': num_1, 'number_2': num_2, 'operation': task_operation, 'result': res};\r\n        */_this.state={number_1:'0',operation:'?',number_2:'0',result:'?',color:'grey',decoration:'',circle:'white',counter:0,passed:0,failed:0,attempt:0};return _this;}_createClass(TwoDigitGame,[{key:\"componentDidMount\",value:function componentDidMount(){// console.log(\"componentDidMount \" + this.props.task);\n}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){// console.log(\"componentDidUpdate \" + prevProps.task + \", this.props.task \" + this.props.task + \", this.props.count \" + this.props.count);\n// Typical usage (don't forget to compare props), otherwise you get infinitive loop\nif(this.props.task!==prevProps.task){this.task=generate_2digit_task_from_array(this.props.task);this.setState({number_1:this.task.number_1,operation:this.task.operation,number_2:this.task.number_2,result:'?',color:'grey',decoration:'',circle:'white',counter:0,passed:0,failed:0,attempt:0});}}},{key:\"proceed_with_next_task\",value:function proceed_with_next_task(){console.log(\"proceed_with_next_task \"+this.state.counter+\", \"+this.props.count);if(this.state.counter<this.props.count){this.task=generate_2digit_task_from_array(this.props.task);this.setState({number_1:this.task.number_1,operation:this.task.operation,number_2:this.task.number_2,color:'grey',circle:'white',result:'?',attempt:0});}else{console.log(\"Finishing Game\");this.props.onClick();}}},{key:\"onDigit\",value:function onDigit(_ref){var target=_ref.target;// console.log(\"onDigit \" + target.innerText);\nthis.check_response(target.innerText.toString());}},{key:\"onOperator\",value:function onOperator(_ref2){var target=_ref2.target;var operator=target.innerText;console.log(\"TBD, onOperator \"+operator);}},{key:\"onKeyboard\",value:function onKeyboard(_ref3){var key=_ref3.key;// console.log(\"onKeyboard \" + key);\nswitch(key){case'0':case'1':case'2':case'3':case'4':case'5':case'6':case'7':case'8':case'9':this.check_response(key);break;case'+':case'-':case'=':case'>':case'<':console.log(\"TBD: check operator response\");break;case'Escape':console.log(\"Escaping from Game\");this.props.onClick();break;default:// console.log(\"nothing to check\");\nbreak;}}},{key:\"check_response\",value:function check_response(digit){var expected_result=this.task.result.toString();if(expected_result.length===1){if(digit===expected_result){this.set_passed(digit);}else{this.set_failed(digit);}}else if(expected_result.length>1){if(this.state.result==='?'){if(expected_result.charAt(0).toString()===digit){this.set_interim(digit);}else{this.set_failed(digit);}}else{var current=this.state.result+digit;if(current===expected_result){this.set_passed(current);}else if(current.length===expected_result.length){this.set_failed(current);}else{var position=this.state.result.length;var val=expected_result.charAt(position).toString();// console.log(\"val \" + val + \", digit \" + digit + \", position \" + position);\nif(val===digit){this.set_interim(current);}else{this.set_failed(current);}}}}else{alert(\"ERROR: Unknown check_response() statement \"+digit);}}},{key:\"set_failed\",value:function set_failed(digit){var _this2=this;// console.log(\"FAILED from \" + this.state.attempt + \" attempts\");\nif(this.state.attempt===0){this.setState({color:'red',result:digit,circle:'red',counter:this.state.counter+1,failed:this.state.failed+1,attempt:this.state.attempt+1});}else{this.setState({color:'red',circle:'red',result:digit,attempt:this.state.attempt+1});}// clear result value in 1.5 seconds\nsetTimeout(function(){_this2.setState({color:'grey',result:'?'});},600);}},{key:\"set_passed\",value:function set_passed(digit){var _this3=this;// console.log(\"PASSED from \" + this.state.attempt + \" attempts\");\nif(this.state.attempt===0){this.setState({color:'green',circle:'green',result:digit,counter:this.state.counter+1,passed:this.state.passed+1});}else{this.setState({color:'green',circle:'yellow',result:digit});}// generate new task and update\nsetTimeout(function(){_this3.proceed_with_next_task();},600);}},{key:\"set_interim\",value:function set_interim(digit){this.setState({color:'black',result:digit});}/*\r\n        <Dialog onClose={() => this.props.onClick()} fullScreen={true} open={this.props.open}>\r\n        https://about.phamvanlam.com/calculator/\r\n\r\n        Warning: The tag <text> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\r\n                            <text style={{color: 'black'}}>{this.state.counter}</text> &nbsp; &#128279; &nbsp;\r\n                            <text style={{color: 'green'}}>{this.state.passed}</text> &nbsp; &#128515; &nbsp;\r\n                            <text style={{color: 'red'}}>{this.state.failed}</text> &nbsp; &#128169;\r\n    */},{key:\"render\",value:function render(){var _this4=this;return React.createElement(Dialog,{onClose:function onClose(){return _this4.props.onClick();},fullScreen:true,onKeyDown:this.onKeyboard,open:this.props.open},React.createElement(\"div\",{className:\"wrapper\"},React.createElement(\"div\",{className:\"header_div\"},React.createElement(\"div\",{className:\"header_div_left\"},\"SUPERMATH\"),React.createElement(\"div\",{className:\"header_div_right\"},React.createElement(\"font\",{style:{color:'black'}},this.state.counter),\" \\xA0 \\uD83D\\uDD17 \\xA0\",React.createElement(\"font\",{style:{color:'green'}},this.state.passed),\" \\xA0 \\uD83D\\uDE03 \\xA0\",React.createElement(\"font\",{style:{color:'red'}},this.state.failed),\" \\xA0 \\uD83D\\uDCA9\")),React.createElement(\"div\",{className:\"body_div\"},React.createElement(\"div\",{className:\"body_div_left\"},React.createElement(\"div\",{className:\"gameboard\"},React.createElement(\"div\",{className:\"gameplay\"},React.createElement(\"div\",{className:\"mo_task\"},this.state.number_1),React.createElement(\"div\",{className:\"mo_task\"},this.state.operation,\"   \",this.state.number_2),React.createElement(\"div\",{className:\"black_line\"},\" \"),React.createElement(\"div\",{className:\"mo_result\",style:{color:this.state.color}},this.state.result)))),React.createElement(\"div\",{className:\"body_div_right\"},React.createElement(SMKeyBoard,{onDigit:this.onDigit,onOperator:this.onOperator}))),React.createElement(\"div\",{className:\"footer_div\"},React.createElement(SMCircles,{color:this.state.circle}))));}}]);return TwoDigitGame;}(React.Component);export{TwoDigitGame as default};","map":{"version":3,"sources":["C:/private/supermath_ng_react/src/components/games/twodigitgame.js"],"names":["React","Dialog","generate_2digit_task_from_array","SMKeyBoard","SMCircles","TwoDigitGame","props","onDigit","bind","onOperator","onKeyboard","state","number_1","operation","number_2","result","color","decoration","circle","counter","passed","failed","attempt","prevProps","task","setState","console","log","count","onClick","target","check_response","innerText","toString","operator","key","digit","expected_result","length","set_passed","set_failed","charAt","set_interim","current","position","val","alert","setTimeout","proceed_with_next_task","open","Component"],"mappings":"4tBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,MAAR,KAAqB,mBAArB,CAEA,OAAQC,+BAAR,KAA8C,wBAA9C,CAEA,MAAOC,CAAAA,UAAP,KAAuB,wBAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,WAAtB,CAEA,MAAO,oBAAP,CAEA;;KAGqBC,CAAAA,Y,kFACjB,sBAAYC,KAAZ,CAAmB,8CACf,8EAAMA,KAAN,GACA,MAAKC,OAAL,CAAe,MAAKA,OAAL,CAAaC,IAAb,+BAAf,CACA,MAAKC,UAAL,CAAkB,MAAKA,UAAL,CAAgBD,IAAhB,+BAAlB,CACA,MAAKE,UAAL,CAAkB,MAAKA,UAAL,CAAgBF,IAAhB,+BAAlB,CAEA;;UAGA,MAAKG,KAAL,CAAa,CAACC,QAAQ,CAAE,GAAX,CACCC,SAAS,CAAE,GADZ,CAECC,QAAQ,CAAE,GAFX,CAGCC,MAAM,CAAE,GAHT,CAICC,KAAK,CAAE,MAJR,CAKCC,UAAU,CAAE,EALb,CAMCC,MAAM,CAAE,OANT,CAOCC,OAAO,CAAE,CAPV,CAQCC,MAAM,CAAE,CART,CASCC,MAAM,CAAE,CATT,CAUCC,OAAO,CAAE,CAVV,CAAb,CATe,aAoBlB,C,sFAEmB,CAChB;AACH,C,8DAEkBC,S,CAAW,CAC1B;AACA;AACA,GAAI,KAAKjB,KAAL,CAAWkB,IAAX,GAAoBD,SAAS,CAACC,IAAlC,CAAwC,CACpC,KAAKA,IAAL,CAAYtB,+BAA+B,CAAC,KAAKI,KAAL,CAAWkB,IAAZ,CAA3C,CACA,KAAKC,QAAL,CAAc,CAACb,QAAQ,CAAE,KAAKY,IAAL,CAAUZ,QAArB,CACCC,SAAS,CAAE,KAAKW,IAAL,CAAUX,SADtB,CAECC,QAAQ,CAAE,KAAKU,IAAL,CAAUV,QAFrB,CAGCC,MAAM,CAAE,GAHT,CAICC,KAAK,CAAE,MAJR,CAKCC,UAAU,CAAE,EALb,CAMCC,MAAM,CAAE,OANT,CAOCC,OAAO,CAAE,CAPV,CAQCC,MAAM,CAAE,CART,CASCC,MAAM,CAAE,CATT,CAUCC,OAAO,CAAE,CAVV,CAAd,EAWH,CACJ,C,uEAEwB,CACrBI,OAAO,CAACC,GAAR,CAAY,0BAA4B,KAAKhB,KAAL,CAAWQ,OAAvC,CAAiD,IAAjD,CAAwD,KAAKb,KAAL,CAAWsB,KAA/E,EACA,GAAI,KAAKjB,KAAL,CAAWQ,OAAX,CAAqB,KAAKb,KAAL,CAAWsB,KAApC,CAA2C,CACvC,KAAKJ,IAAL,CAAYtB,+BAA+B,CAAC,KAAKI,KAAL,CAAWkB,IAAZ,CAA3C,CACA,KAAKC,QAAL,CAAc,CAACb,QAAQ,CAAE,KAAKY,IAAL,CAAUZ,QAArB,CACCC,SAAS,CAAE,KAAKW,IAAL,CAAUX,SADtB,CAECC,QAAQ,CAAE,KAAKU,IAAL,CAAUV,QAFrB,CAGCE,KAAK,CAAE,MAHR,CAICE,MAAM,CAAE,OAJT,CAKCH,MAAM,CAAE,GALT,CAMCO,OAAO,CAAE,CANV,CAAd,EAOH,CATD,IASO,CACHI,OAAO,CAACC,GAAR,CAAY,gBAAZ,EACA,KAAKrB,KAAL,CAAWuB,OAAX,GACH,CACJ,C,6CAEmB,IAAVC,CAAAA,MAAU,MAAVA,MAAU,CAChB;AACA,KAAKC,cAAL,CAAqBD,MAAM,CAACE,SAAR,CAAmBC,QAAnB,EAApB,EACH,C,oDAEsB,IAAVH,CAAAA,MAAU,OAAVA,MAAU,CACnB,GAAMI,CAAAA,QAAQ,CAAGJ,MAAM,CAACE,SAAxB,CACAN,OAAO,CAACC,GAAR,CAAY,mBAAqBO,QAAjC,EACH,C,oDAEmB,IAAPC,CAAAA,GAAO,OAAPA,GAAO,CAChB;AACA,OAAQA,GAAR,EACI,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACI,KAAKJ,cAAL,CAAoBI,GAApB,EACA,MAEJ,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACA,IAAK,GAAL,CACIT,OAAO,CAACC,GAAR,CAAY,8BAAZ,EACA,MAEJ,IAAK,QAAL,CACID,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACA,KAAKrB,KAAL,CAAWuB,OAAX,GACA,MAEJ,QACI;AACA,MA7BR,CA+BH,C,sDAEcO,K,CAAO,CAClB,GAAIC,CAAAA,eAAe,CAAG,KAAKb,IAAL,CAAUT,MAAV,CAAiBkB,QAAjB,EAAtB,CACA,GAAII,eAAe,CAACC,MAAhB,GAA2B,CAA/B,CAAkC,CAC9B,GAAIF,KAAK,GAAKC,eAAd,CAA+B,CAC3B,KAAKE,UAAL,CAAgBH,KAAhB,EACH,CAFD,IAEO,CACH,KAAKI,UAAL,CAAgBJ,KAAhB,EACH,CAEJ,CAPD,IAOO,IAAIC,eAAe,CAACC,MAAhB,CAAyB,CAA7B,CAAgC,CACnC,GAAI,KAAK3B,KAAL,CAAWI,MAAX,GAAsB,GAA1B,CAA+B,CAC3B,GAAIsB,eAAe,CAACI,MAAhB,CAAuB,CAAvB,EAA0BR,QAA1B,KAAyCG,KAA7C,CAAoD,CAChD,KAAKM,WAAL,CAAiBN,KAAjB,EACH,CAFD,IAEO,CACH,KAAKI,UAAL,CAAgBJ,KAAhB,EACH,CACJ,CAND,IAMO,CACH,GAAIO,CAAAA,OAAO,CAAG,KAAKhC,KAAL,CAAWI,MAAX,CAAoBqB,KAAlC,CACA,GAAIO,OAAO,GAAKN,eAAhB,CAAiC,CAC7B,KAAKE,UAAL,CAAgBI,OAAhB,EACH,CAFD,IAEO,IAAIA,OAAO,CAACL,MAAR,GAAmBD,eAAe,CAACC,MAAvC,CAA+C,CAClD,KAAKE,UAAL,CAAgBG,OAAhB,EACH,CAFM,IAEA,CACH,GAAIC,CAAAA,QAAQ,CAAG,KAAKjC,KAAL,CAAWI,MAAX,CAAkBuB,MAAjC,CACA,GAAIO,CAAAA,GAAG,CAAGR,eAAe,CAACI,MAAhB,CAAuBG,QAAvB,EAAiCX,QAAjC,EAAV,CACA;AACA,GAAIY,GAAG,GAAKT,KAAZ,CAAmB,CACf,KAAKM,WAAL,CAAiBC,OAAjB,EACH,CAFD,IAEO,CACH,KAAKH,UAAL,CAAgBG,OAAhB,EACH,CACJ,CACJ,CACJ,CAxBM,IAwBA,CACHG,KAAK,CAAC,6CAA+CV,KAAhD,CAAL,CACH,CACJ,C,8CAEUA,K,CAAO,iBACd;AACA,GAAI,KAAKzB,KAAL,CAAWW,OAAX,GAAuB,CAA3B,CAA8B,CAC1B,KAAKG,QAAL,CAAc,CAACT,KAAK,CAAE,KAAR,CACCD,MAAM,CAAEqB,KADT,CAEClB,MAAM,CAAE,KAFT,CAGCC,OAAO,CAAE,KAAKR,KAAL,CAAWQ,OAAX,CAAqB,CAH/B,CAICE,MAAM,CAAE,KAAKV,KAAL,CAAWU,MAAX,CAAoB,CAJ7B,CAKCC,OAAO,CAAE,KAAKX,KAAL,CAAWW,OAAX,CAAqB,CAL/B,CAAd,EAMH,CAPD,IAOO,CACH,KAAKG,QAAL,CAAc,CAACT,KAAK,CAAE,KAAR,CACCE,MAAM,CAAE,KADT,CAECH,MAAM,CAAEqB,KAFT,CAGCd,OAAO,CAAE,KAAKX,KAAL,CAAWW,OAAX,CAAqB,CAH/B,CAAd,EAIH,CACD;AACAyB,UAAU,CAAC,UAAM,CAAC,MAAI,CAACtB,QAAL,CAAc,CAACT,KAAK,CAAE,MAAR,CAAgBD,MAAM,CAAE,GAAxB,CAAd,EAA6C,CAArD,CAAuD,GAAvD,CAAV,CACH,C,8CAEUqB,K,CAAO,iBACd;AACA,GAAI,KAAKzB,KAAL,CAAWW,OAAX,GAAuB,CAA3B,CAA8B,CAC1B,KAAKG,QAAL,CAAc,CAACT,KAAK,CAAE,OAAR,CACCE,MAAM,CAAE,OADT,CAECH,MAAM,CAAEqB,KAFT,CAGCjB,OAAO,CAAE,KAAKR,KAAL,CAAWQ,OAAX,CAAqB,CAH/B,CAICC,MAAM,CAAE,KAAKT,KAAL,CAAWS,MAAX,CAAoB,CAJ7B,CAAd,EAKH,CAND,IAMO,CACH,KAAKK,QAAL,CAAc,CAACT,KAAK,CAAE,OAAR,CACCE,MAAM,CAAE,QADT,CAECH,MAAM,CAAEqB,KAFT,CAAd,EAGH,CACD;AACAW,UAAU,CAAC,UAAM,CAAC,MAAI,CAACC,sBAAL,GAA8B,CAAtC,CAAwC,GAAxC,CAAV,CACH,C,gDAEWZ,K,CAAO,CACf,KAAKX,QAAL,CAAc,CAACT,KAAK,CAAE,OAAR,CACCD,MAAM,CAAEqB,KADT,CAAd,EAEH,CAED;;;;;;;;6CASS,iBACL,MACI,qBAAC,MAAD,EAAQ,OAAO,CAAE,yBAAM,CAAA,MAAI,CAAC9B,KAAL,CAAWuB,OAAX,EAAN,EAAjB,CAA6C,UAAU,CAAE,IAAzD,CAA+D,SAAS,CAAE,KAAKnB,UAA/E,CAA2F,IAAI,CAAE,KAAKJ,KAAL,CAAW2C,IAA5G,EACI,2BAAK,SAAS,CAAC,SAAf,EACI,2BAAK,SAAS,CAAC,YAAf,EACI,2BAAK,SAAS,CAAC,iBAAf,cADJ,CAEI,2BAAK,SAAS,CAAC,kBAAf,EACI,4BAAM,KAAK,CAAE,CAACjC,KAAK,CAAE,OAAR,CAAb,EAAgC,KAAKL,KAAL,CAAWQ,OAA3C,CADJ,2BAEI,4BAAM,KAAK,CAAE,CAACH,KAAK,CAAE,OAAR,CAAb,EAAgC,KAAKL,KAAL,CAAWS,MAA3C,CAFJ,2BAGI,4BAAM,KAAK,CAAE,CAACJ,KAAK,CAAE,KAAR,CAAb,EAA8B,KAAKL,KAAL,CAAWU,MAAzC,CAHJ,sBAFJ,CADJ,CAUI,2BAAK,SAAS,CAAC,UAAf,EACI,2BAAK,SAAS,CAAC,eAAf,EACI,2BAAK,SAAS,CAAC,WAAf,EACI,2BAAK,SAAS,CAAC,UAAf,EACI,2BAAK,SAAS,CAAC,SAAf,EAA0B,KAAKV,KAAL,CAAWC,QAArC,CADJ,CAEI,2BAAK,SAAS,CAAC,SAAf,EAA0B,KAAKD,KAAL,CAAWE,SAArC,OAAmD,KAAKF,KAAL,CAAWG,QAA9D,CAFJ,CAGI,2BAAK,SAAS,CAAC,YAAf,MAHJ,CAII,2BAAK,SAAS,CAAC,WAAf,CAA2B,KAAK,CAAE,CAACE,KAAK,CAAE,KAAKL,KAAL,CAAWK,KAAnB,CAAlC,EAA8D,KAAKL,KAAL,CAAWI,MAAzE,CAJJ,CADJ,CADJ,CADJ,CAYI,2BAAK,SAAS,CAAC,gBAAf,EACI,oBAAC,UAAD,EAAY,OAAO,CAAE,KAAKR,OAA1B,CAAmC,UAAU,CAAE,KAAKE,UAApD,EADJ,CAZJ,CAVJ,CA2BI,2BAAK,SAAS,CAAC,YAAf,EACI,oBAAC,SAAD,EAAW,KAAK,CAAE,KAAKE,KAAL,CAAWO,MAA7B,EADJ,CA3BJ,CADJ,CADJ,CAmCH,C,0BAxOqClB,KAAK,CAACkD,S,SAA3B7C,Y","sourcesContent":["import React from 'react';\r\nimport {Dialog} from '@material-ui/core';\r\n\r\nimport {generate_2digit_task_from_array} from \"./../halpers/functions\";\r\n\r\nimport SMKeyBoard from \"./../keyboard/keyboard\";\r\nimport SMCircles from \"./circles\";\r\n\r\nimport './twodigitgame.css';\r\n\r\n/*\r\n\r\n*/\r\nexport default class TwoDigitGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onDigit = this.onDigit.bind(this);\r\n        this.onOperator = this.onOperator.bind(this);\r\n        this.onKeyboard = this.onKeyboard.bind(this);\r\n\r\n        /*\r\n            {'number_1': num_1, 'number_2': num_2, 'operation': task_operation, 'result': res};\r\n        */\r\n        this.state = {number_1: '0',\r\n                      operation: '?',\r\n                      number_2: '0',\r\n                      result: '?',\r\n                      color: 'grey',\r\n                      decoration: '',\r\n                      circle: 'white',\r\n                      counter: 0,\r\n                      passed: 0,\r\n                      failed: 0,\r\n                      attempt: 0};\r\n    }\r\n\r\n    componentDidMount() {\r\n        // console.log(\"componentDidMount \" + this.props.task);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        // console.log(\"componentDidUpdate \" + prevProps.task + \", this.props.task \" + this.props.task + \", this.props.count \" + this.props.count);\r\n        // Typical usage (don't forget to compare props), otherwise you get infinitive loop\r\n        if (this.props.task !== prevProps.task) {\r\n            this.task = generate_2digit_task_from_array(this.props.task);\r\n            this.setState({number_1: this.task.number_1,\r\n                           operation: this.task.operation,\r\n                           number_2: this.task.number_2,\r\n                           result: '?',\r\n                           color: 'grey',\r\n                           decoration: '',\r\n                           circle: 'white',\r\n                           counter: 0,\r\n                           passed: 0,\r\n                           failed: 0,\r\n                           attempt: 0});\r\n        }\r\n    }\r\n\r\n    proceed_with_next_task() {\r\n        console.log(\"proceed_with_next_task \" + this.state.counter + \", \" + this.props.count);\r\n        if (this.state.counter < this.props.count) {\r\n            this.task = generate_2digit_task_from_array(this.props.task);\r\n            this.setState({number_1: this.task.number_1,\r\n                           operation: this.task.operation,\r\n                           number_2: this.task.number_2,\r\n                           color: 'grey',\r\n                           circle: 'white',\r\n                           result: '?',\r\n                           attempt: 0});\r\n        } else {\r\n            console.log(\"Finishing Game\");\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    onDigit({ target }) {\r\n        // console.log(\"onDigit \" + target.innerText);\r\n        this.check_response((target.innerText).toString());\r\n    }\r\n\r\n    onOperator({ target }) {\r\n        const operator = target.innerText;\r\n        console.log(\"TBD, onOperator \" + operator);\r\n    }\r\n\r\n    onKeyboard({ key }) {\r\n        // console.log(\"onKeyboard \" + key);\r\n        switch (key) {\r\n            case '0':\r\n            case '1':\r\n            case '2':\r\n            case '3':\r\n            case '4':\r\n            case '5':\r\n            case '6':\r\n            case '7':\r\n            case '8':\r\n            case '9':\r\n                this.check_response(key);\r\n                break;\r\n\r\n            case '+':\r\n            case '-':\r\n            case '=':\r\n            case '>':\r\n            case '<':\r\n                console.log(\"TBD: check operator response\");\r\n                break;\r\n\r\n            case 'Escape':\r\n                console.log(\"Escaping from Game\");\r\n                this.props.onClick();\r\n                break;\r\n\r\n            default:\r\n                // console.log(\"nothing to check\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    check_response(digit) {\r\n        var expected_result = this.task.result.toString();\r\n        if (expected_result.length === 1) {\r\n            if (digit === expected_result) {\r\n                this.set_passed(digit);\r\n            } else {\r\n                this.set_failed(digit);\r\n            }\r\n\r\n        } else if (expected_result.length > 1) {\r\n            if (this.state.result === '?') {\r\n                if (expected_result.charAt(0).toString() === digit) {\r\n                    this.set_interim(digit);\r\n                } else {\r\n                    this.set_failed(digit);\r\n                }\r\n            } else {\r\n                var current = this.state.result + digit;\r\n                if (current === expected_result) {\r\n                    this.set_passed(current);\r\n                } else if (current.length === expected_result.length) {\r\n                    this.set_failed(current);\r\n                } else {\r\n                    var position = this.state.result.length;\r\n                    var val = expected_result.charAt(position).toString();\r\n                    // console.log(\"val \" + val + \", digit \" + digit + \", position \" + position);\r\n                    if (val === digit) {\r\n                        this.set_interim(current);\r\n                    } else {\r\n                        this.set_failed(current);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            alert(\"ERROR: Unknown check_response() statement \" + digit);\r\n        }\r\n    }\r\n\r\n    set_failed(digit) {\r\n        // console.log(\"FAILED from \" + this.state.attempt + \" attempts\");\r\n        if (this.state.attempt === 0) {\r\n            this.setState({color: 'red',\r\n                           result: digit,\r\n                           circle: 'red',\r\n                           counter: this.state.counter + 1,\r\n                           failed: this.state.failed + 1,\r\n                           attempt: this.state.attempt + 1});\r\n        } else {\r\n            this.setState({color: 'red',\r\n                           circle: 'red',\r\n                           result: digit,\r\n                           attempt: this.state.attempt + 1});\r\n        }\r\n        // clear result value in 1.5 seconds\r\n        setTimeout(() => {this.setState({color: 'grey', result: '?'});}, 600);\r\n    }\r\n\r\n    set_passed(digit) {\r\n        // console.log(\"PASSED from \" + this.state.attempt + \" attempts\");\r\n        if (this.state.attempt === 0) {\r\n            this.setState({color: 'green',\r\n                           circle: 'green',\r\n                           result: digit,\r\n                           counter: this.state.counter + 1,\r\n                           passed: this.state.passed + 1});\r\n        } else {\r\n            this.setState({color: 'green',\r\n                           circle: 'yellow',\r\n                           result: digit});\r\n        }\r\n        // generate new task and update\r\n        setTimeout(() => {this.proceed_with_next_task()}, 600);\r\n    }\r\n\r\n    set_interim(digit) {\r\n        this.setState({color: 'black',\r\n                       result: digit});\r\n    }\r\n\r\n    /*\r\n        <Dialog onClose={() => this.props.onClick()} fullScreen={true} open={this.props.open}>\r\n        https://about.phamvanlam.com/calculator/\r\n\r\n        Warning: The tag <text> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\r\n                            <text style={{color: 'black'}}>{this.state.counter}</text> &nbsp; &#128279; &nbsp;\r\n                            <text style={{color: 'green'}}>{this.state.passed}</text> &nbsp; &#128515; &nbsp;\r\n                            <text style={{color: 'red'}}>{this.state.failed}</text> &nbsp; &#128169;\r\n    */\r\n    render() {\r\n        return (\r\n            <Dialog onClose={() => this.props.onClick()} fullScreen={true} onKeyDown={this.onKeyboard} open={this.props.open}>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"header_div\">\r\n                        <div className=\"header_div_left\">SUPERMATH</div>\r\n                        <div className=\"header_div_right\">\r\n                            <font style={{color: 'black'}}>{this.state.counter}</font> &nbsp; &#128279; &nbsp;\r\n                            <font style={{color: 'green'}}>{this.state.passed}</font> &nbsp; &#128515; &nbsp;\r\n                            <font style={{color: 'red'}}>{this.state.failed}</font> &nbsp; &#128169;\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"body_div\">\r\n                        <div className=\"body_div_left\">\r\n                            <div className=\"gameboard\">\r\n                                <div className=\"gameplay\">\r\n                                    <div className=\"mo_task\">{this.state.number_1}</div>\r\n                                    <div className=\"mo_task\">{this.state.operation}   {this.state.number_2}</div>\r\n                                    <div className=\"black_line\"> </div>\r\n                                    <div className=\"mo_result\" style={{color: this.state.color}}>{this.state.result}</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"body_div_right\">\r\n                            <SMKeyBoard onDigit={this.onDigit} onOperator={this.onOperator} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"footer_div\">\r\n                        <SMCircles color={this.state.circle}/>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}