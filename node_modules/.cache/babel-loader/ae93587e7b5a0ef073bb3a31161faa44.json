{"ast":null,"code":"/** @const {string} */\nvar OPERATION_SUM = '+';\n/** @const {string} */\n\nvar OPERATION_SUB = '-';\n/** @const {string} */\n\nvar OPERATION_MUL = '*';\n/** @const {string} */\n\nvar OPERATION_DIV = '/';\n/** @const {string} */\n\nvar OPERATION_GREATER = '>';\n/** @const {string} */\n\nvar OPERATION_SMALLER = '<';\n/** @const {string} */\n\nvar OPERATION_EQUALLY = '=';\n/**\r\n * Returns a random number between min (inclusive) and max (inclusive)\r\n * from 0 to 10: [0...10]\r\n * from 10 to 99: [10...99]\r\n * from 100 to 999: [100...999]\r\n */\n\nfunction get_random_int(range) {\n  var numbers = range.split(',');\n\n  if (numbers.length < 2) {\n    alert(\"get_random_int error: wrong range format '\" + range + \"'\");\n    return;\n  }\n\n  var minum = parseInt(numbers[0]);\n  var maxum = parseInt(numbers[1]);\n  return Math.floor(Math.random() * (maxum - minum + 1)) + minum;\n}\n/*\r\n    usage: \r\n*/\n\n\nexport function generate_2digit_task_from_array(array) {\n  console.log(\"generate_2digit_task_from_array:: \" + array);\n  return generate_2digit_task(array[0], array[1], array[2], array[3], array[4]);\n}\n/*\r\n    usage example:\r\n        generate_rnd_task('+', '0,9', '0,9', 1, 1) - sum of one figit numbers\r\n        generate_rnd_task('+-', '0,10', '0,10', 10, 10) - sum/sub of tens\r\n        generate_rnd_task('+-*', '0,10', '0,10') - sum/sub/mul of one digit numbers\r\n*/\n\nexport function generate_2digit_task(operations, range_number_1, range_number_2, factor_1, factor_2) {\n  var operation = '';\n\n  if (operations.length === 1) {\n    operation = operations;\n  } else {\n    var array = operations.split('');\n    operation = array[Math.floor(Math.random() * array.length)];\n  }\n\n  var num_1 = 0,\n      num_2 = 0,\n      res = 0,\n      tmp = 0;\n\n  switch (operation) {\n    case OPERATION_SUM:\n      num_1 = parseInt(get_random_int(range_number_1) * factor_1);\n      num_2 = parseInt(get_random_int(range_number_2) * factor_2);\n      res = num_1 + num_2;\n      break;\n\n    case OPERATION_SUB:\n      num_1 = parseInt(get_random_int(range_number_1) * factor_1);\n      num_2 = parseInt(get_random_int(range_number_2) * factor_2); // swap numbers if first less than second\n\n      if (num_1 < num_2) {\n        tmp = num_1;\n        num_1 = num_2;\n        num_2 = tmp;\n      }\n\n      res = num_1 - num_2;\n      break;\n\n    case OPERATION_MUL:\n      num_1 = parseInt(get_random_int(range_number_1) * factor_1);\n      num_2 = parseInt(get_random_int(range_number_2) * factor_2);\n      res = num_1 * num_2;\n      break;\n\n    case OPERATION_DIV:\n      // /\n      res = parseInt(get_random_int(range_number_1) * factor_1);\n      num_2 = parseInt(get_random_int(range_number_2) * factor_2);\n      num_1 = num_2 * res;\n      break;\n\n    case OPERATION_GREATER:\n      // >\n      num_1 = parseInt(get_random_int(range_number_1) * factor_1);\n      num_2 = parseInt(get_random_int(range_number_2) * factor_2);\n\n      if (num_1 < num_2) {\n        tmp = num_1;\n        num_1 = num_2;\n        num_2 = tmp;\n      }\n\n      res = '>';\n      break;\n\n    case OPERATION_SMALLER:\n      // <\n      num_1 = parseInt(get_random_int(range_number_1) * factor_1);\n      num_2 = parseInt(get_random_int(range_number_2) * factor_2);\n\n      if (num_1 > num_2) {\n        tmp = num_1;\n        num_1 = num_2;\n        num_2 = tmp;\n      }\n\n      res = '<';\n      break;\n\n    case OPERATION_EQUALLY:\n      // =\n      num_1 = parseInt(get_random_int(range_number_1) * factor_1);\n      num_2 = num_1;\n      res = '=';\n      break;\n\n    default:\n      alert(\"RND generator error: Unknown math operation '\" + operation + \"'\");\n      break;\n  }\n\n  if (operation === OPERATION_SUM || operation === OPERATION_MUL) {\n    // randomNumber is true => swap num_1 & num_2\n    var randomNumber = Math.random() >= 0.5;\n\n    if (randomNumber) {\n      tmp = num_1;\n      num_1 = num_2;\n      num_2 = tmp;\n    }\n  }\n\n  var return_value = {\n    'number_1': num_1,\n    'number_2': num_2,\n    'operation': operation,\n    'result': res\n  };\n  console.log(\"generate_2digit_task:: \" + return_value.number_1 + return_value.operation + return_value.number_2 + \"=\" + return_value.result);\n  return return_value;\n}","map":{"version":3,"sources":["C:/private/supermath_ng_react/src/components/halpers/functions.js"],"names":["OPERATION_SUM","OPERATION_SUB","OPERATION_MUL","OPERATION_DIV","OPERATION_GREATER","OPERATION_SMALLER","OPERATION_EQUALLY","get_random_int","range","numbers","split","length","alert","minum","parseInt","maxum","Math","floor","random","generate_2digit_task_from_array","array","console","log","generate_2digit_task","operations","range_number_1","range_number_2","factor_1","factor_2","operation","num_1","num_2","res","tmp","randomNumber","return_value","number_1","number_2","result"],"mappings":"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","sourcesContent":["/** @const {string} */\r\nvar OPERATION_SUM = '+';\r\n/** @const {string} */\r\nvar OPERATION_SUB = '-';\r\n/** @const {string} */\r\nvar OPERATION_MUL = '*';\r\n/** @const {string} */\r\nvar OPERATION_DIV = '/';\r\n\r\n/** @const {string} */\r\nvar OPERATION_GREATER = '>';\r\n/** @const {string} */\r\nvar OPERATION_SMALLER = '<';\r\n/** @const {string} */\r\nvar OPERATION_EQUALLY = '=';\r\n\r\n/**\r\n * Returns a random number between min (inclusive) and max (inclusive)\r\n * from 0 to 10: [0...10]\r\n * from 10 to 99: [10...99]\r\n * from 100 to 999: [100...999]\r\n */\r\nfunction get_random_int(range) {\r\n    var numbers = range.split(',');\r\n    if (numbers.length < 2) {\r\n        alert(\"get_random_int error: wrong range format '\" + range + \"'\");\r\n        return;\r\n    }\r\n\r\n    var minum = parseInt(numbers[0]);\r\n    var maxum = parseInt(numbers[1]);\r\n\r\n    return Math.floor(Math.random() * (maxum - minum + 1)) + minum;\r\n}\r\n\r\n/*\r\n    usage: \r\n*/\r\nexport function generate_2digit_task_from_array(array) {\r\n    console.log(\"generate_2digit_task_from_array:: \" + array);\r\n    return generate_2digit_task(array[0], array[1], array[2], array[3], array[4]);\r\n}\r\n\r\n/*\r\n    usage example:\r\n        generate_rnd_task('+', '0,9', '0,9', 1, 1) - sum of one figit numbers\r\n        generate_rnd_task('+-', '0,10', '0,10', 10, 10) - sum/sub of tens\r\n        generate_rnd_task('+-*', '0,10', '0,10') - sum/sub/mul of one digit numbers\r\n*/\r\nexport function generate_2digit_task(operations, range_number_1, range_number_2, factor_1, factor_2) {\r\n    var operation = '';\r\n    if (operations.length === 1) {\r\n        operation = operations;\r\n    } else {\r\n        var array = operations.split('');\r\n        operation = array[Math.floor(Math.random() * (array.length))];\r\n    }\r\n        \r\n    var num_1 = 0, num_2 = 0, res = 0, tmp = 0;\r\n    switch (operation) {\r\n        case OPERATION_SUM:\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            res = num_1 + num_2;\r\n        break;\r\n\r\n        case OPERATION_SUB:\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            // swap numbers if first less than second\r\n            if (num_1 < num_2) {\r\n                tmp = num_1; num_1 = num_2; num_2 = tmp;\r\n            }\r\n            res = num_1 - num_2;\r\n        break;\r\n\r\n        case OPERATION_MUL:\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            res = num_1 * num_2;\r\n        break;\r\n\r\n        case OPERATION_DIV: // /\r\n            res = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            num_1 = num_2 * res;\r\n\r\n        break;\r\n\r\n        case OPERATION_GREATER: // >\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            if (num_1 < num_2) {\r\n                tmp = num_1; num_1 = num_2; num_2 = tmp;\r\n            }\r\n            res = '>';\r\n        break;\r\n\r\n        case OPERATION_SMALLER: // <\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            if (num_1 > num_2) {\r\n                tmp = num_1; num_1 = num_2; num_2 = tmp;\r\n            }\r\n            res = '<';\r\n        break;\r\n\r\n        case OPERATION_EQUALLY: // =\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = num_1; res = '=';\r\n        break;\r\n\r\n        default:\r\n            alert(\"RND generator error: Unknown math operation '\" + operation + \"'\");\r\n        break;\r\n      }\r\n\r\n      if ((operation === OPERATION_SUM) || (operation === OPERATION_MUL)) {\r\n          // randomNumber is true => swap num_1 & num_2\r\n          var randomNumber = Math.random() >= 0.5;\r\n          if (randomNumber) {\r\n              tmp = num_1; num_1 = num_2; num_2 = tmp;\r\n          }\r\n      }\r\n\r\n      var return_value = {'number_1': num_1,\r\n                          'number_2': num_2,\r\n                          'operation': operation,\r\n                          'result': res};\r\n\r\n      console.log(\"generate_2digit_task:: \"\r\n                  + return_value.number_1\r\n                  + return_value.operation\r\n                  + return_value.number_2\r\n                  + \"=\" + return_value.result);\r\n\r\n      return return_value;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}