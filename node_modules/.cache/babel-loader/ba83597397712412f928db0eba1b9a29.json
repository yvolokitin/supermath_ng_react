{"ast":null,"code":"var _jsxFileName = \"C:\\\\private\\\\supermath_ng_react\\\\src\\\\components\\\\games\\\\twodigitgame.js\";\nimport React from 'react';\nimport { Dialog } from '@material-ui/core';\nimport { generate_2digit_task_from_array } from \"./../halpers/functions\";\nimport SMKeyBoard from \"./../keyboard/keyboard\";\nimport SMCircles from \"./circles\";\nimport './twodigitgame.css';\n/*\r\n\r\n*/\n\nexport default class TwoDigitGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onDigit = this.onDigit.bind(this);\n    this.onOperator = this.onOperator.bind(this);\n    this.onKeyboard = this.onKeyboard.bind(this);\n    /*\r\n        {'number_1': num_1, 'number_2': num_2, 'operation': task_operation, 'result': res};\r\n    */\n\n    this.state = {\n      number_1: '0',\n      operation: '?',\n      number_2: '0',\n      result: '?',\n      color: 'grey',\n      decoration: '',\n      circle: 'white',\n      counter: 0,\n      passed: 0,\n      failed: 0,\n      attempt: 0\n    };\n  }\n\n  componentDidMount() {\n    /*\r\n            console.log(\"componentDidMount \" + this.props.task);\r\n    \r\n            this.task = generate_2digit_task_from_array(this.props.task);\r\n            this.setState({number_1: this.task.number_1,\r\n                           operation: this.task.operation,\r\n                           number_2: this.task.number_2,\r\n                           result: '?',\r\n                           color: 'grey',\r\n                           decoration: '',\r\n                           circle: 'white',\r\n                           counter: 0,\r\n                           passed: 0,\r\n                           failed: 0,\r\n                           attempt: 0});\r\n    */\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(\"componentDidUpdate \" + prevProps.task + \", this.props.task \" + this.props.task + \", this.props.count \" + this.props.count); // Typical usage (don't forget to compare props), otherwise you get infinitive loop\n\n    if (this.props.task !== prevProps.task) {\n      this.task = generate_2digit_task_from_array(this.props.task);\n      this.setState({\n        number_1: this.task.number_1,\n        operation: this.task.operation,\n        number_2: this.task.number_2,\n        result: '?',\n        color: 'grey',\n        decoration: '',\n        circle: 'white',\n        counter: 0,\n        passed: 0,\n        failed: 0,\n        attempt: 0\n      });\n    }\n  }\n\n  onDigit({\n    target\n  }) {\n    // console.log(\"onDigit \" + target.innerText);\n    this.check_response(target.innerText.toString());\n  }\n\n  onOperator({\n    target\n  }) {\n    const operator = target.innerText;\n    console.log(\"TBD, onOperator \" + operator);\n  }\n\n  onKeyboard({\n    key\n  }) {\n    // console.log(\"onKeyboard \" + key);\n    switch (key) {\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        this.check_response(key);\n        break;\n\n      case '+':\n      case '-':\n      case '=':\n      case '>':\n      case '<':\n        console.log(\"TBD: check operator response\");\n        break;\n\n      case 'Escape':\n        console.log(\"Escaping from Game\");\n        this.props.onClick();\n        break;\n\n      default:\n        // console.log(\"nothing to check\");\n        break;\n    }\n  }\n\n  check_response(digit) {\n    var expected_result = this.task.result.toString();\n\n    if (expected_result.length === 1) {\n      if (digit === expected_result) {\n        this.set_passed(digit);\n      } else {\n        this.set_failed(digit);\n      }\n    } else if (expected_result.length > 1) {\n      if (this.state.result === '?') {\n        if (expected_result.charAt(0).toString() === digit) {\n          this.set_interim(digit);\n        } else {\n          this.set_failed(digit);\n        }\n      } else {\n        var current = this.state.result + digit;\n\n        if (current === expected_result) {\n          this.set_passed(current);\n        } else if (current.length === expected_result.length) {\n          this.set_failed(current);\n        } else {\n          var position = this.state.result.length;\n          var val = expected_result.charAt(position).toString(); // console.log(\"val \" + val + \", digit \" + digit + \", position \" + position);\n\n          if (val === digit) {\n            this.set_interim(current);\n          } else {\n            this.set_failed(current);\n          }\n        }\n      }\n    } else {\n      alert(\"ERROR: Unknown check_response() statement \" + digit);\n    }\n  }\n\n  set_failed(digit) {\n    // console.log(\"FAILED from \" + this.state.attempt + \" attempts\");\n    if (this.state.attempt === 0) {\n      this.setState({\n        color: 'red',\n        result: digit,\n        circle: 'red',\n        counter: this.state.counter + 1,\n        failed: this.state.failed + 1,\n        attempt: this.state.attempt + 1\n      });\n    } else {\n      this.setState({\n        color: 'red',\n        circle: 'red',\n        result: digit,\n        attempt: this.state.attempt + 1\n      });\n    } // clear result value in 1.5 seconds\n\n\n    setTimeout(() => {\n      this.setState({\n        color: 'grey',\n        result: '?'\n      });\n    }, 600);\n  }\n\n  set_passed(digit) {\n    // console.log(\"PASSED from \" + this.state.attempt + \" attempts\");\n    if (this.state.attempt === 0) {\n      this.setState({\n        color: 'green',\n        circle: 'green',\n        result: digit,\n        counter: this.state.counter + 1,\n        passed: this.state.passed + 1\n      });\n    } else {\n      this.setState({\n        color: 'green',\n        circle: 'yellow',\n        result: digit\n      });\n    } // generate new task and update\n\n\n    setTimeout(() => {\n      this.proceed_with_next_task();\n    }, 600);\n  }\n\n  set_interim(digit) {\n    this.setState({\n      color: 'black',\n      result: digit\n    });\n  }\n\n  proceed_with_next_task() {\n    console.log(\"proceed_with_next_task \" + this.props.task);\n    this.task = generate_2digit_task_from_array(this.props.task);\n    this.setState({\n      number_1: this.task.number_1,\n      operation: this.task.operation,\n      number_2: this.task.number_2,\n      color: 'grey',\n      circle: 'white',\n      result: '?',\n      attempt: 0\n    });\n  }\n  /*\r\n      <Dialog onClose={() => this.props.onClick()} fullScreen={true} open={this.props.open}>\r\n      https://about.phamvanlam.com/calculator/\r\n        Warning: The tag <text> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\r\n                          <text style={{color: 'black'}}>{this.state.counter}</text> &nbsp; &#128279; &nbsp;\r\n                          <text style={{color: 'green'}}>{this.state.passed}</text> &nbsp; &#128515; &nbsp;\r\n                          <text style={{color: 'red'}}>{this.state.failed}</text> &nbsp; &#128169;\r\n  */\n\n\n  render() {\n    return React.createElement(Dialog, {\n      onClose: () => this.props.onClick(),\n      fullScreen: true,\n      onKeyDown: this.onKeyboard,\n      open: this.props.open,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header_div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header_div_left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"SUPERMATH\"), React.createElement(\"div\", {\n      className: \"header_div_right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(\"font\", {\n      style: {\n        color: 'black'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, this.state.counter), \" \\xA0 \\uD83D\\uDD17 \\xA0\", React.createElement(\"font\", {\n      style: {\n        color: 'green'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, this.state.passed), \" \\xA0 \\uD83D\\uDE03 \\xA0\", React.createElement(\"font\", {\n      style: {\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, this.state.failed), \" \\xA0 \\uD83D\\uDCA9\")), React.createElement(\"div\", {\n      className: \"body_div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"body_div_left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"gameboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"gameplay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mo_task\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, this.state.number_1), React.createElement(\"div\", {\n      className: \"mo_task\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, this.state.operation, \"   \", this.state.number_2), React.createElement(\"div\", {\n      className: \"black_line\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \" \"), React.createElement(\"div\", {\n      className: \"mo_result\",\n      style: {\n        color: this.state.color\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, this.state.result)))), React.createElement(\"div\", {\n      className: \"body_div_right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(SMKeyBoard, {\n      onDigit: this.onDigit,\n      onOperator: this.onOperator,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"footer_div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(SMCircles, {\n      color: this.state.circle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/private/supermath_ng_react/src/components/games/twodigitgame.js"],"names":["React","Dialog","generate_2digit_task_from_array","SMKeyBoard","SMCircles","TwoDigitGame","Component","constructor","props","onDigit","bind","onOperator","onKeyboard","state","number_1","operation","number_2","result","color","decoration","circle","counter","passed","failed","attempt","componentDidMount","componentDidUpdate","prevProps","console","log","task","count","setState","target","check_response","innerText","toString","operator","key","onClick","digit","expected_result","length","set_passed","set_failed","charAt","set_interim","current","position","val","alert","setTimeout","proceed_with_next_task","render","open"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Dialog} from '@material-ui/core';\r\n\r\nimport {generate_2digit_task_from_array} from \"./../halpers/functions\";\r\n\r\nimport SMKeyBoard from \"./../keyboard/keyboard\";\r\nimport SMCircles from \"./circles\";\r\n\r\nimport './twodigitgame.css';\r\n\r\n/*\r\n\r\n*/\r\nexport default class TwoDigitGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onDigit = this.onDigit.bind(this);\r\n        this.onOperator = this.onOperator.bind(this);\r\n        this.onKeyboard = this.onKeyboard.bind(this);\r\n\r\n        /*\r\n            {'number_1': num_1, 'number_2': num_2, 'operation': task_operation, 'result': res};\r\n        */\r\n        this.state = {number_1: '0',\r\n                      operation: '?',\r\n                      number_2: '0',\r\n                      result: '?',\r\n                      color: 'grey',\r\n                      decoration: '',\r\n                      circle: 'white',\r\n                      counter: 0,\r\n                      passed: 0,\r\n                      failed: 0,\r\n                      attempt: 0};\r\n    }\r\n\r\n    componentDidMount() {\r\n/*\r\n        console.log(\"componentDidMount \" + this.props.task);\r\n\r\n        this.task = generate_2digit_task_from_array(this.props.task);\r\n        this.setState({number_1: this.task.number_1,\r\n                       operation: this.task.operation,\r\n                       number_2: this.task.number_2,\r\n                       result: '?',\r\n                       color: 'grey',\r\n                       decoration: '',\r\n                       circle: 'white',\r\n                       counter: 0,\r\n                       passed: 0,\r\n                       failed: 0,\r\n                       attempt: 0});\r\n*/\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        console.log(\"componentDidUpdate \" + prevProps.task + \", this.props.task \" + this.props.task + \", this.props.count \" + this.props.count);\r\n        // Typical usage (don't forget to compare props), otherwise you get infinitive loop\r\n        if (this.props.task !== prevProps.task) {\r\n        this.task = generate_2digit_task_from_array(this.props.task);\r\n        this.setState({number_1: this.task.number_1,\r\n                       operation: this.task.operation,\r\n                       number_2: this.task.number_2,\r\n                       result: '?',\r\n                       color: 'grey',\r\n                       decoration: '',\r\n                       circle: 'white',\r\n                       counter: 0,\r\n                       passed: 0,\r\n                       failed: 0,\r\n                       attempt: 0});\r\n        }\r\n    }\r\n\r\n    onDigit({ target }) {\r\n        // console.log(\"onDigit \" + target.innerText);\r\n        this.check_response((target.innerText).toString());\r\n    }\r\n\r\n    onOperator({ target }) {\r\n        const operator = target.innerText;\r\n        console.log(\"TBD, onOperator \" + operator);\r\n    }\r\n\r\n    onKeyboard({ key }) {\r\n        // console.log(\"onKeyboard \" + key);\r\n        switch (key) {\r\n            case '0':\r\n            case '1':\r\n            case '2':\r\n            case '3':\r\n            case '4':\r\n            case '5':\r\n            case '6':\r\n            case '7':\r\n            case '8':\r\n            case '9':\r\n                this.check_response(key);\r\n                break;\r\n\r\n            case '+':\r\n            case '-':\r\n            case '=':\r\n            case '>':\r\n            case '<':\r\n                console.log(\"TBD: check operator response\");\r\n                break;\r\n\r\n            case 'Escape':\r\n                console.log(\"Escaping from Game\");\r\n                this.props.onClick();\r\n                break;\r\n\r\n            default:\r\n                // console.log(\"nothing to check\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    check_response(digit) {\r\n        var expected_result = this.task.result.toString();\r\n        if (expected_result.length === 1) {\r\n            if (digit === expected_result) {\r\n                this.set_passed(digit);\r\n            } else {\r\n                this.set_failed(digit);\r\n            }\r\n\r\n        } else if (expected_result.length > 1) {\r\n            if (this.state.result === '?') {\r\n                if (expected_result.charAt(0).toString() === digit) {\r\n                    this.set_interim(digit);\r\n                } else {\r\n                    this.set_failed(digit);\r\n                }\r\n            } else {\r\n                var current = this.state.result + digit;\r\n                if (current === expected_result) {\r\n                    this.set_passed(current);\r\n                } else if (current.length === expected_result.length) {\r\n                    this.set_failed(current);\r\n                } else {\r\n                    var position = this.state.result.length;\r\n                    var val = expected_result.charAt(position).toString();\r\n                    // console.log(\"val \" + val + \", digit \" + digit + \", position \" + position);\r\n                    if (val === digit) {\r\n                        this.set_interim(current);\r\n                    } else {\r\n                        this.set_failed(current);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            alert(\"ERROR: Unknown check_response() statement \" + digit);\r\n        }\r\n    }\r\n\r\n    set_failed(digit) {\r\n        // console.log(\"FAILED from \" + this.state.attempt + \" attempts\");\r\n        if (this.state.attempt === 0) {\r\n            this.setState({color: 'red',\r\n                           result: digit,\r\n                           circle: 'red',\r\n                           counter: this.state.counter + 1,\r\n                           failed: this.state.failed + 1,\r\n                           attempt: this.state.attempt + 1});\r\n        } else {\r\n            this.setState({color: 'red',\r\n                           circle: 'red',\r\n                           result: digit,\r\n                           attempt: this.state.attempt + 1});\r\n        }\r\n        // clear result value in 1.5 seconds\r\n        setTimeout(() => {this.setState({color: 'grey', result: '?'});}, 600);\r\n    }\r\n\r\n    set_passed(digit) {\r\n        // console.log(\"PASSED from \" + this.state.attempt + \" attempts\");\r\n        if (this.state.attempt === 0) {\r\n            this.setState({color: 'green',\r\n                           circle: 'green',\r\n                           result: digit,\r\n                           counter: this.state.counter + 1,\r\n                           passed: this.state.passed + 1});\r\n        } else {\r\n            this.setState({color: 'green',\r\n                           circle: 'yellow',\r\n                           result: digit});\r\n        }\r\n        // generate new task and update\r\n        setTimeout(() => {this.proceed_with_next_task()}, 600);\r\n    }\r\n\r\n    set_interim(digit) {\r\n        this.setState({color: 'black',\r\n                       result: digit});\r\n    }\r\n\r\n    proceed_with_next_task() {\r\n        console.log(\"proceed_with_next_task \" + this.props.task);\r\n        this.task = generate_2digit_task_from_array(this.props.task);\r\n        this.setState({number_1: this.task.number_1,\r\n                       operation: this.task.operation,\r\n                       number_2: this.task.number_2,\r\n                       color: 'grey',\r\n                       circle: 'white',\r\n                       result: '?',\r\n                       attempt: 0});\r\n    }\r\n\r\n    /*\r\n        <Dialog onClose={() => this.props.onClick()} fullScreen={true} open={this.props.open}>\r\n        https://about.phamvanlam.com/calculator/\r\n\r\n        Warning: The tag <text> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\r\n                            <text style={{color: 'black'}}>{this.state.counter}</text> &nbsp; &#128279; &nbsp;\r\n                            <text style={{color: 'green'}}>{this.state.passed}</text> &nbsp; &#128515; &nbsp;\r\n                            <text style={{color: 'red'}}>{this.state.failed}</text> &nbsp; &#128169;\r\n    */\r\n    render() {\r\n        return (\r\n            <Dialog onClose={() => this.props.onClick()} fullScreen={true} onKeyDown={this.onKeyboard} open={this.props.open}>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"header_div\">\r\n                        <div className=\"header_div_left\">SUPERMATH</div>\r\n                        <div className=\"header_div_right\">\r\n                            <font style={{color: 'black'}}>{this.state.counter}</font> &nbsp; &#128279; &nbsp;\r\n                            <font style={{color: 'green'}}>{this.state.passed}</font> &nbsp; &#128515; &nbsp;\r\n                            <font style={{color: 'red'}}>{this.state.failed}</font> &nbsp; &#128169;\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"body_div\">\r\n                        <div className=\"body_div_left\">\r\n                            <div className=\"gameboard\">\r\n                                <div className=\"gameplay\">\r\n                                    <div className=\"mo_task\">{this.state.number_1}</div>\r\n                                    <div className=\"mo_task\">{this.state.operation}   {this.state.number_2}</div>\r\n                                    <div className=\"black_line\"> </div>\r\n                                    <div className=\"mo_result\" style={{color: this.state.color}}>{this.state.result}</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"body_div_right\">\r\n                            <SMKeyBoard onDigit={this.onDigit} onOperator={this.onOperator} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"footer_div\">\r\n                        <SMCircles color={this.state.circle}/>\r\n                    </div>\r\n                </div>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}