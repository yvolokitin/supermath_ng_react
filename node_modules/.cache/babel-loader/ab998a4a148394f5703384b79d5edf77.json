{"ast":null,"code":"/** @const {string} */var OPERATION_SUM='+';/** @const {string} */var OPERATION_SUB='-';/** @const {string} */var OPERATION_MUL='*';/** @const {string} */var OPERATION_DIV='/';/** @const {string} */var OPERATION_GREATER='>';/** @const {string} */var OPERATION_SMALLER='<';/** @const {string} */var OPERATION_EQUALLY='=';/**\r\n * Returns a random number between min (inclusive) and max (inclusive)\r\n *\r\n * [0...9], [10...99], [100...999]\r\n */function get_rnd_int(int_min,int_max){return Math.floor(Math.random()*(int_max-int_min+1))+int_min;}export function generate_rnd_task(task_operation,range){var numbers=range.split(',');if(numbers.length<2){alert(\"RND generator error: wrong range numbers format '\"+range+\"'\");return;}var minum=parseInt(numbers[0]);var maxum=parseInt(numbers[1]);var factor_1='1',factor_2='1';if(numbers.length===4){if(numbers[2].indexOf('=')!==-1||numbers[3].indexOf('=')!==-1){factor_1=numbers[2];factor_2=numbers[3];}else{factor_1=numbers[2];factor_2=numbers[3];}}var num_1=0,num_2=0,res=0;switch(task_operation){case OPERATION_SUM:num_1=parseInt(get_rnd_int(minum,maxum)*factor_1);num_2=parseInt(get_rnd_int(minum,maxum)*factor_2);res=num_1+num_2;break;case OPERATION_SUB:// if task_operation is '-' (minus), the first number should be\n// >= second, i.e. result should not be negative\nif(minum>=maxum){alert(\"RND generator error: wrong MAX and MIN ranges '\"+range+\"'\");return;}else{// generate numbers first and only AFTER that * factor\nnum_2=get_rnd_int(minum,maxum);num_1=get_rnd_int(num_2,maxum);num_1=parseInt(num_1*factor_1);num_2=parseInt(num_2*factor_2);res=num_1-num_2;}break;case OPERATION_MUL:// =10 means that num_1=10, i.e. first number should be exactly 10\nif(factor_1.indexOf('=')!==-1){num_1=factor_1.substr(1,factor_1.length);}else{num_1=parseInt(get_rnd_int(minum,maxum)*factor_1);}if(factor_2.indexOf('=')!==-1){num_2=factor_2.substr(1,factor_2.length);}else{// 'yellow_1': [TYPE_MO, '*', '0,9,1,=10', 'result', 10, 'game'],\n// 'yellow_2': [TYPE_MO, '*', '0,3', 'result', 10, 'game'],\n// 'yellow_3': [TYPE_MO, '*', '0,7', 'result', 10, 'game'],\n// 'yellow_4': [TYPE_MO, '*', '0,10', 'result', 10, 'game'],\n// 'yellow_5': [TYPE_MO, '/', '0,9,10,=10', 'result', 10, 'game'],\n// 'yellow_6': [TYPE_MO, '/', '1,3', 'result', 10, 'game'],\n// 'yellow_7': [TYPE_MO, '/', '1,7', 'result', 10, 'game'],\n// 'yellow_8': [TYPE_MO, '/', '1,10', 'result', 10, 'game'],\n// 'yellow_9': [TYPE_CO, '*/', '0,9', 'operation', 10, 'game'],\n// 'yellow_10': [TYPE_MO, '*', '1,10', 'number_2', 10, 'game'],\n// 'yellow_11': [TYPE_MO, '/', '1,10', 'number_2', 10, 'game'],\n// 'yellow_12': [TYPE_MO, '*/', '1,10', 'result', 10, 'game'],\nif(numbers.length===2){if(maxum<10){maxum=10;}}num_2=parseInt(get_rnd_int(minum,maxum)*factor_2);}res=num_1*num_2;break;case OPERATION_DIV:// /\n// =10 means that num_1=10, i.e. first number should be exactly 10\nif(factor_2.indexOf('=')!==-1){num_2=factor_2.substr(1,factor_2.length);}else{if(minum===0){minum=1;}num_2=parseInt(get_rnd_int(minum,maxum)*factor_2);}res=parseInt(get_rnd_int(minum,maxum));num_1=res*num_2;break;case OPERATION_GREATER:// >\nres='>';num_1=parseInt(get_rnd_int(minum+1,maxum)*factor_1);num_2=parseInt(get_rnd_int(minum,num_1-1)*factor_2);break;case OPERATION_SMALLER:// <\nres='<';num_1=parseInt(get_rnd_int(minum,maxum-1)*factor_1);num_2=parseInt(get_rnd_int(num_1+1,maxum)*factor_2);break;case OPERATION_EQUALLY:// =\nres='=';num_1=parseInt(get_rnd_int(minum,maxum)*factor_1);num_2=num_1;break;default:alert(\"RND generator error: Unknown math task_operation '\"+task_operation+\"'\");return;}if(task_operation===OPERATION_SUM||task_operation===OPERATION_SUB||task_operation===OPERATION_MUL||task_operation===OPERATION_DIV){// randomNumber is true => swap num_1 & num_2\nvar randomNumber=Math.random()>=0.5;if(randomNumber){var tmp=num_1;num_1=num_2;num_2=tmp;}}return{'number_1':num_1,'number_2':num_2,'operation':task_operation,'result':res};}","map":{"version":3,"sources":["E:/supermath_ng/supermath_ng_react/src/components/halpers/functions.js"],"names":["OPERATION_SUM","OPERATION_SUB","OPERATION_MUL","OPERATION_DIV","OPERATION_GREATER","OPERATION_SMALLER","OPERATION_EQUALLY","get_rnd_int","int_min","int_max","Math","floor","random","generate_rnd_task","task_operation","range","numbers","split","length","alert","minum","parseInt","maxum","factor_1","factor_2","indexOf","num_1","num_2","res","substr","randomNumber","tmp"],"mappings":"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","sourcesContent":["/** @const {string} */\r\nvar OPERATION_SUM = '+';\r\n/** @const {string} */\r\nvar OPERATION_SUB = '-';\r\n/** @const {string} */\r\nvar OPERATION_MUL = '*';\r\n/** @const {string} */\r\nvar OPERATION_DIV = '/';\r\n\r\n/** @const {string} */\r\nvar OPERATION_GREATER = '>';\r\n/** @const {string} */\r\nvar OPERATION_SMALLER = '<';\r\n/** @const {string} */\r\nvar OPERATION_EQUALLY = '=';\r\n\r\n/**\r\n * Returns a random number between min (inclusive) and max (inclusive)\r\n *\r\n * [0...9], [10...99], [100...999]\r\n */\r\nfunction get_rnd_int(int_min, int_max) {\r\n    return Math.floor(Math.random() * (int_max - int_min + 1)) + int_min;\r\n}\r\n\r\nexport function generate_rnd_task(task_operation, range) {\r\n      var numbers = range.split(',');\r\n      if (numbers.length < 2) {\r\n          alert(\"RND generator error: wrong range numbers format '\" + range + \"'\");\r\n          return;\r\n      }\r\n\r\n      var minum = parseInt(numbers[0]);\r\n      var maxum = parseInt(numbers[1]);\r\n      var factor_1 = '1', factor_2 = '1';\r\n      if (numbers.length === 4) {\r\n        if ((numbers[2].indexOf('=') !== -1) ||\r\n            (numbers[3].indexOf('=') !== -1)) {\r\n          factor_1 = numbers[2]; factor_2 = numbers[3];\r\n        } else {\r\n          factor_1 = numbers[2];\r\n          factor_2 = numbers[3];\r\n        }\r\n      }\r\n\r\n      var num_1 = 0, num_2 = 0, res = 0;\r\n      switch (task_operation) {\r\n        case OPERATION_SUM:\r\n            num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\r\n            num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\r\n            res = num_1 + num_2;\r\n        break;\r\n\r\n        case OPERATION_SUB:\r\n            // if task_operation is '-' (minus), the first number should be\r\n            // >= second, i.e. result should not be negative\r\n            if (minum >= maxum) {\r\n                alert(\"RND generator error: wrong MAX and MIN ranges '\" + range + \"'\");\r\n                return;\r\n            } else {\r\n                // generate numbers first and only AFTER that * factor\r\n                num_2 = get_rnd_int(minum, maxum);\r\n                num_1 = get_rnd_int(num_2, maxum);\r\n\r\n                num_1 = parseInt(num_1 * factor_1);\r\n                num_2 = parseInt(num_2 * factor_2);\r\n\r\n                res = num_1 - num_2;\r\n            }\r\n        break;\r\n\r\n        case OPERATION_MUL:\r\n            // =10 means that num_1=10, i.e. first number should be exactly 10\r\n            if (factor_1.indexOf('=') !== -1) {\r\n              num_1 = factor_1.substr(1, factor_1.length);\r\n            } else {\r\n              num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\r\n            }\r\n\r\n            if (factor_2.indexOf('=') !== -1) {\r\n              num_2 = factor_2.substr(1, factor_2.length);\r\n            } else {\r\n              // 'yellow_1': [TYPE_MO, '*', '0,9,1,=10', 'result', 10, 'game'],\r\n              // 'yellow_2': [TYPE_MO, '*', '0,3', 'result', 10, 'game'],\r\n              // 'yellow_3': [TYPE_MO, '*', '0,7', 'result', 10, 'game'],\r\n              // 'yellow_4': [TYPE_MO, '*', '0,10', 'result', 10, 'game'],\r\n              // 'yellow_5': [TYPE_MO, '/', '0,9,10,=10', 'result', 10, 'game'],\r\n              // 'yellow_6': [TYPE_MO, '/', '1,3', 'result', 10, 'game'],\r\n              // 'yellow_7': [TYPE_MO, '/', '1,7', 'result', 10, 'game'],\r\n              // 'yellow_8': [TYPE_MO, '/', '1,10', 'result', 10, 'game'],\r\n              // 'yellow_9': [TYPE_CO, '*/', '0,9', 'operation', 10, 'game'],\r\n              // 'yellow_10': [TYPE_MO, '*', '1,10', 'number_2', 10, 'game'],\r\n              // 'yellow_11': [TYPE_MO, '/', '1,10', 'number_2', 10, 'game'],\r\n              // 'yellow_12': [TYPE_MO, '*/', '1,10', 'result', 10, 'game'],\r\n              if (numbers.length === 2) {\r\n                if (maxum < 10) {\r\n                    maxum = 10;\r\n                }\r\n              }\r\n              num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\r\n            }\r\n\r\n            res = num_1 * num_2;\r\n        break;\r\n\r\n        case OPERATION_DIV: // /\r\n            // =10 means that num_1=10, i.e. first number should be exactly 10\r\n            if (factor_2.indexOf('=') !== -1) {\r\n              num_2 = factor_2.substr(1, factor_2.length);\r\n            } else {\r\n              if (minum === 0) {minum=1;}\r\n              num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\r\n            }\r\n\r\n            res = parseInt(get_rnd_int(minum, maxum));\r\n            num_1 = res * num_2;\r\n        break;\r\n\r\n        case OPERATION_GREATER: // >\r\n          res = '>';\r\n          num_1 = parseInt(get_rnd_int(minum+1, maxum) * factor_1);\r\n          num_2 = parseInt(get_rnd_int(minum, num_1-1) * factor_2);\r\n        break;\r\n\r\n        case OPERATION_SMALLER: // <\r\n          res = '<';\r\n          num_1 = parseInt(get_rnd_int(minum, maxum-1) * factor_1);\r\n          num_2 = parseInt(get_rnd_int(num_1+1, maxum) * factor_2);\r\n        break;\r\n\r\n        case OPERATION_EQUALLY: // =\r\n          res = '=';\r\n          num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\r\n          num_2 = num_1;\r\n        break;\r\n\r\n        default:\r\n          alert(\"RND generator error: Unknown math task_operation '\" + task_operation + \"'\");\r\n          return;\r\n      }\r\n\r\n      if ((task_operation === OPERATION_SUM) ||\r\n          (task_operation === OPERATION_SUB) ||\r\n          (task_operation === OPERATION_MUL) ||\r\n          (task_operation === OPERATION_DIV)) {\r\n        // randomNumber is true => swap num_1 & num_2\r\n        var randomNumber = Math.random() >= 0.5;\r\n        if (randomNumber) {\r\n            var tmp = num_1; num_1 = num_2; num_2 = tmp;\r\n        }\r\n      }\r\n\r\n      return {'number_1': num_1,\r\n              'number_2': num_2,\r\n              'operation': task_operation,\r\n              'result': res};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}