{"ast":null,"code":"/** @const {string} */var OPERATION_SUM='+';/** @const {string} */var OPERATION_SUB='-';/** @const {string} */var OPERATION_MUL='*';/** @const {string} */var OPERATION_DIV='/';/** @const {string} */var OPERATION_GREATER='>';/** @const {string} */var OPERATION_SMALLER='<';/** @const {string} */var OPERATION_EQUALLY='=';/**\r\n * Returns a random number between min (inclusive) and max (inclusive)\r\n * from 0 to 10: [0...10]\r\n * from 10 to 99: [10...99]\r\n * from 100 to 999: [100...999]\r\n */function get_random_int(range){var numbers=range.split(',');if(numbers.length<2){alert(\"get_random_int error: wrong range format '\"+range+\"'\");return;}var minum=parseInt(numbers[0]);var maxum=parseInt(numbers[1]);return Math.floor(Math.random()*(maxum-minum+1))+minum;}/*\r\n    usage: \r\n*/export function generate_2digit_task_from_array(array){// console.log(\"generate_2digit_task_from_array:: \" + array);\nreturn generate_2digit_task(array[0],array[1],array[2],array[3],array[4]);}/*\r\n    usage example:\r\n        generate_rnd_task('+', '0,9', '0,9', 1, 1) - sum of one figit numbers\r\n        generate_rnd_task('+-', '0,10', '0,10', 10, 10) - sum/sub of tens\r\n        generate_rnd_task('+-*', '0,10', '0,10') - sum/sub/mul of one digit numbers\r\n*/export function generate_2digit_task(operations,range_number_1,range_number_2,factor_1,factor_2){var operation='';if(operations.length===1){operation=operations;}else{var array=operations.split('');operation=array[Math.floor(Math.random()*array.length)];}var num_1=0,num_2=0,res=0,tmp=0;switch(operation){case OPERATION_SUM:num_1=parseInt(get_random_int(range_number_1)*factor_1);num_2=parseInt(get_random_int(range_number_2)*factor_2);res=num_1+num_2;break;case OPERATION_SUB:num_1=parseInt(get_random_int(range_number_1)*factor_1);num_2=parseInt(get_random_int(range_number_2)*factor_2);// swap numbers if first less than second\nif(num_1<num_2){tmp=num_1;num_1=num_2;num_2=tmp;}res=num_1-num_2;break;case OPERATION_MUL:num_1=parseInt(get_random_int(range_number_1)*factor_1);num_2=parseInt(get_random_int(range_number_2)*factor_2);res=num_1*num_2;break;case OPERATION_DIV:// /\nres=parseInt(get_random_int(range_number_1)*factor_1);num_2=parseInt(get_random_int(range_number_2)*factor_2);num_1=num_2*res;break;case OPERATION_GREATER:// >\nnum_1=parseInt(get_random_int(range_number_1)*factor_1);num_2=parseInt(get_random_int(range_number_2)*factor_2);if(num_1<num_2){tmp=num_1;num_1=num_2;num_2=tmp;}res='>';break;case OPERATION_SMALLER:// <\nnum_1=parseInt(get_random_int(range_number_1)*factor_1);num_2=parseInt(get_random_int(range_number_2)*factor_2);if(num_1>num_2){tmp=num_1;num_1=num_2;num_2=tmp;}res='<';break;case OPERATION_EQUALLY:// =\nnum_1=parseInt(get_random_int(range_number_1)*factor_1);num_2=num_1;res='=';break;default:alert(\"RND generator error: Unknown math operation '\"+operation+\"'\");break;}if(operation===OPERATION_SUM||operation===OPERATION_MUL){// randomNumber is true => swap num_1 & num_2\nvar randomNumber=Math.random()>=0.5;if(randomNumber){tmp=num_1;num_1=num_2;num_2=tmp;}}var return_value={'number_1':num_1,'number_2':num_2,'operation':operation,'result':res};console.log(\"generate_2digit_task:: \"+return_value.number_1+return_value.operation+return_value.number_2+\"=\"+return_value.result);return return_value;}","map":{"version":3,"sources":["C:/private/supermath_ng_react/src/components/halpers/functions.js"],"names":["OPERATION_SUM","OPERATION_SUB","OPERATION_MUL","OPERATION_DIV","OPERATION_GREATER","OPERATION_SMALLER","OPERATION_EQUALLY","get_random_int","range","numbers","split","length","alert","minum","parseInt","maxum","Math","floor","random","generate_2digit_task_from_array","array","generate_2digit_task","operations","range_number_1","range_number_2","factor_1","factor_2","operation","num_1","num_2","res","tmp","randomNumber","return_value","console","log","number_1","number_2","result"],"mappings":"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","sourcesContent":["/** @const {string} */\r\nvar OPERATION_SUM = '+';\r\n/** @const {string} */\r\nvar OPERATION_SUB = '-';\r\n/** @const {string} */\r\nvar OPERATION_MUL = '*';\r\n/** @const {string} */\r\nvar OPERATION_DIV = '/';\r\n\r\n/** @const {string} */\r\nvar OPERATION_GREATER = '>';\r\n/** @const {string} */\r\nvar OPERATION_SMALLER = '<';\r\n/** @const {string} */\r\nvar OPERATION_EQUALLY = '=';\r\n\r\n/**\r\n * Returns a random number between min (inclusive) and max (inclusive)\r\n * from 0 to 10: [0...10]\r\n * from 10 to 99: [10...99]\r\n * from 100 to 999: [100...999]\r\n */\r\nfunction get_random_int(range) {\r\n    var numbers = range.split(',');\r\n    if (numbers.length < 2) {\r\n        alert(\"get_random_int error: wrong range format '\" + range + \"'\");\r\n        return;\r\n    }\r\n\r\n    var minum = parseInt(numbers[0]);\r\n    var maxum = parseInt(numbers[1]);\r\n\r\n    return Math.floor(Math.random() * (maxum - minum + 1)) + minum;\r\n}\r\n\r\n/*\r\n    usage: \r\n*/\r\nexport function generate_2digit_task_from_array(array) {\r\n    // console.log(\"generate_2digit_task_from_array:: \" + array);\r\n    return generate_2digit_task(array[0], array[1], array[2], array[3], array[4]);\r\n}\r\n\r\n/*\r\n    usage example:\r\n        generate_rnd_task('+', '0,9', '0,9', 1, 1) - sum of one figit numbers\r\n        generate_rnd_task('+-', '0,10', '0,10', 10, 10) - sum/sub of tens\r\n        generate_rnd_task('+-*', '0,10', '0,10') - sum/sub/mul of one digit numbers\r\n*/\r\nexport function generate_2digit_task(operations, range_number_1, range_number_2, factor_1, factor_2) {\r\n    var operation = '';\r\n    if (operations.length === 1) {\r\n        operation = operations;\r\n    } else {\r\n        var array = operations.split('');\r\n        operation = array[Math.floor(Math.random() * (array.length))];\r\n    }\r\n        \r\n    var num_1 = 0, num_2 = 0, res = 0, tmp = 0;\r\n    switch (operation) {\r\n        case OPERATION_SUM:\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            res = num_1 + num_2;\r\n        break;\r\n\r\n        case OPERATION_SUB:\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            // swap numbers if first less than second\r\n            if (num_1 < num_2) {\r\n                tmp = num_1; num_1 = num_2; num_2 = tmp;\r\n            }\r\n            res = num_1 - num_2;\r\n        break;\r\n\r\n        case OPERATION_MUL:\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            res = num_1 * num_2;\r\n        break;\r\n\r\n        case OPERATION_DIV: // /\r\n            res = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            num_1 = num_2 * res;\r\n\r\n        break;\r\n\r\n        case OPERATION_GREATER: // >\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            if (num_1 < num_2) {\r\n                tmp = num_1; num_1 = num_2; num_2 = tmp;\r\n            }\r\n            res = '>';\r\n        break;\r\n\r\n        case OPERATION_SMALLER: // <\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = parseInt(get_random_int(range_number_2) * factor_2);\r\n            if (num_1 > num_2) {\r\n                tmp = num_1; num_1 = num_2; num_2 = tmp;\r\n            }\r\n            res = '<';\r\n        break;\r\n\r\n        case OPERATION_EQUALLY: // =\r\n            num_1 = parseInt(get_random_int(range_number_1) * factor_1);\r\n            num_2 = num_1; res = '=';\r\n        break;\r\n\r\n        default:\r\n            alert(\"RND generator error: Unknown math operation '\" + operation + \"'\");\r\n        break;\r\n      }\r\n\r\n      if ((operation === OPERATION_SUM) || (operation === OPERATION_MUL)) {\r\n          // randomNumber is true => swap num_1 & num_2\r\n          var randomNumber = Math.random() >= 0.5;\r\n          if (randomNumber) {\r\n              tmp = num_1; num_1 = num_2; num_2 = tmp;\r\n          }\r\n      }\r\n\r\n      var return_value = {'number_1': num_1,\r\n                          'number_2': num_2,\r\n                          'operation': operation,\r\n                          'result': res};\r\n\r\n      console.log(\"generate_2digit_task:: \"\r\n                  + return_value.number_1\r\n                  + return_value.operation\r\n                  + return_value.number_2\r\n                  + \"=\" + return_value.result);\r\n\r\n      return return_value;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}