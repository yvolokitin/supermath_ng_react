{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDraggable = require('react-draggable');\n\nvar _reactDraggable2 = _interopRequireDefault(_reactDraggable);\n\nvar _KeyboardButton = require('./KeyboardButton');\n\nvar _KeyboardButton2 = _interopRequireDefault(_KeyboardButton);\n\nvar _LatinLayout = require('./layouts/LatinLayout');\n\nvar _LatinLayout2 = _interopRequireDefault(_LatinLayout);\n\nvar _CyrillicLayout = require('./layouts/CyrillicLayout');\n\nvar _CyrillicLayout2 = _interopRequireDefault(_CyrillicLayout);\n\nvar _SymbolsLayout = require('./layouts/SymbolsLayout');\n\nvar _SymbolsLayout2 = _interopRequireDefault(_SymbolsLayout);\n\nvar _GermanLayout = require('./layouts/GermanLayout');\n\nvar _GermanLayout2 = _interopRequireDefault(_GermanLayout);\n\nvar _FrenchLayout = require('./layouts/FrenchLayout');\n\nvar _FrenchLayout2 = _interopRequireDefault(_FrenchLayout);\n\nvar _BackspaceIcon = require('./icons/BackspaceIcon');\n\nvar _BackspaceIcon2 = _interopRequireDefault(_BackspaceIcon);\n\nvar _LanguageIcon = require('./icons/LanguageIcon');\n\nvar _LanguageIcon2 = _interopRequireDefault(_LanguageIcon);\n\nvar _ShiftIcon = require('./icons/ShiftIcon');\n\nvar _ShiftIcon2 = _interopRequireDefault(_ShiftIcon);\n\nvar _DraggableIcon = require('./icons/DraggableIcon');\n\nvar _DraggableIcon2 = _interopRequireDefault(_DraggableIcon);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // The default\n\n\nvar Keyboard = function (_PureComponent) {\n  _inherits(Keyboard, _PureComponent);\n\n  function Keyboard(props) {\n    _classCallCheck(this, Keyboard);\n\n    var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, props));\n\n    _this.getCharacterClassName = function (letter) {\n      var char = '' + letter;\n\n      if (char.length > 1) {\n        return '';\n      }\n\n      return 'keyboard-key-' + char.charCodeAt(0);\n    };\n\n    _this.handleLetterButtonClick = _this.handleLetterButtonClick.bind(_this);\n    _this.handleBackspaceClick = _this.handleBackspaceClick.bind(_this);\n    _this.clearInput = _this.clearInput.bind(_this);\n    _this.handleShiftClick = _this.handleShiftClick.bind(_this);\n    _this.handleSymbolsClick = _this.handleSymbolsClick.bind(_this);\n    _this.handleLanguageClick = _this.handleLanguageClick.bind(_this);\n    _this.handleDragKeyClick = _this.handleDragKeyClick.bind(_this);\n    _this.state = {\n      currentLanguage: props.defaultKeyboard,\n      showSymbols: false,\n      uppercase: _this.isUppercase()\n    };\n    return _this;\n  }\n\n  _createClass(Keyboard, [{\n    key: 'getKeys',\n    value: function getKeys() {\n      var keysSet = void 0;\n\n      if (this.state.showSymbols) {\n        keysSet = _SymbolsLayout2.default;\n      } else if (this.state.currentLanguage === 'us') {\n        keysSet = _LatinLayout2.default;\n      } else if (this.state.currentLanguage === 'de') {\n        keysSet = _GermanLayout2.default;\n      } else if (this.state.currentLanguage === 'fr') {\n        keysSet = _FrenchLayout2.default;\n      } else if (this.state.currentLanguage === 'ru') {\n        keysSet = _CyrillicLayout2.default;\n      } else if (this.state.currentLanguage) {\n        keysSet = this.state.currentLanguage;\n      } else {\n        keysSet = _LatinLayout2.default;\n      }\n\n      return this.state.uppercase ? keysSet.map(function (keyRow) {\n        return keyRow.map(function (key) {\n          return isFinite(key) ? key : key.toUpperCase();\n        });\n      }) : keysSet;\n    }\n  }, {\n    key: 'getSymbolsKeyValue',\n    value: function getSymbolsKeyValue() {\n      var symbolsKeyValue = void 0;\n\n      if (!this.state.showSymbols) {\n        symbolsKeyValue = '.?!&';\n      } else if (this.state.currentLanguage === 'us' || this.state.currentLanguage === 'de') {\n        symbolsKeyValue = 'Abc';\n      } else if (this.state.currentLanguage === 'ru') {\n        symbolsKeyValue = 'Абв';\n      } else {\n        symbolsKeyValue = 'Abc';\n      }\n\n      return symbolsKeyValue;\n    }\n  }, {\n    key: 'handleLanguageClick',\n    value: function handleLanguageClick() {\n      this.setState({\n        currentLanguage: this.state.currentLanguage === this.props.defaultKeyboard ? this.props.secondaryKeyboard : this.props.defaultKeyboard\n      });\n    }\n  }, {\n    key: 'clearInput',\n    value: function clearInput() {\n      var inputNode = this.props.inputNode;\n      inputNode.value = '';\n\n      if (this.props.onClick) {\n        this.props.onClick('');\n      }\n\n      setTimeout(function () {\n        inputNode.focus();\n      }, 0);\n      inputNode.dispatchEvent(new CustomEvent('input'));\n    }\n  }, {\n    key: 'handleShiftClick',\n    value: function handleShiftClick() {\n      this.setState({\n        uppercase: !this.state.uppercase\n      });\n    }\n  }, {\n    key: 'handleSymbolsClick',\n    value: function handleSymbolsClick() {\n      this.setState({\n        showSymbols: !this.state.showSymbols\n      });\n    }\n  }, {\n    key: 'handleLetterButtonClick',\n    value: function handleLetterButtonClick(key) {\n      var inputNode = this.props.inputNode;\n      var value = inputNode.value;\n      var selectionStart = void 0;\n      var selectionEnd = void 0;\n\n      try {\n        selectionStart = inputNode.selectionStart;\n        selectionEnd = inputNode.selectionEnd;\n      } catch (e) {\n        selectionStart = value.length;\n        selectionEnd = value.length;\n      }\n\n      var nextValue = value.substring(0, selectionStart) + key + value.substring(selectionEnd);\n      inputNode.value = nextValue;\n\n      if (this.props.onClick) {\n        this.props.onClick(nextValue);\n      }\n\n      setTimeout(function () {\n        inputNode.focus();\n\n        try {\n          var offset = !isFinite(key) ? key.length : 1;\n          inputNode.setSelectionRange(selectionStart + offset, selectionStart + offset);\n        } catch (e) {\n          console.error(e);\n        }\n      });\n      this.setState({\n        uppercase: this.isUppercase()\n      });\n      inputNode.dispatchEvent(new CustomEvent('input'));\n    }\n  }, {\n    key: 'handleDragKeyClick',\n    value: function handleDragKeyClick() {\n      var inputNode = this.props.inputNode;\n      setTimeout(function () {\n        inputNode.focus();\n      }, 0);\n    }\n  }, {\n    key: 'isUppercase',\n    value: function isUppercase() {\n      var _props = this.props,\n          inputNode = _props.inputNode,\n          isFirstLetterUppercase = _props.isFirstLetterUppercase,\n          uppercaseAfterSpace = _props.uppercaseAfterSpace,\n          dataset = _props.dataset;\n      return inputNode.type !== 'password' && dataset.type !== 'email' && (!inputNode.value.length && isFirstLetterUppercase || inputNode.value.length > 0 && inputNode.value[inputNode.value.length - 1] === ' ' && uppercaseAfterSpace);\n    }\n  }, {\n    key: 'handleBackspaceClick',\n    value: function handleBackspaceClick() {\n      var inputNode = this.props.inputNode;\n      var value = inputNode.value;\n      var selectionStart = void 0;\n      var selectionEnd = void 0;\n\n      try {\n        selectionStart = inputNode.selectionStart;\n        selectionEnd = inputNode.selectionEnd;\n      } catch (e) {\n        selectionStart = 0;\n        selectionEnd = value.length;\n      }\n\n      var nextValue = void 0;\n      var nextSelectionPosition = void 0;\n\n      if (selectionStart === selectionEnd) {\n        nextValue = value.substring(0, selectionStart - 1) + value.substring(selectionEnd);\n        nextSelectionPosition = selectionStart - 1;\n      } else {\n        nextValue = value.substring(0, selectionStart) + value.substring(selectionEnd);\n        nextSelectionPosition = selectionStart;\n      }\n\n      nextSelectionPosition = nextSelectionPosition > 0 ? nextSelectionPosition : 0;\n      inputNode.value = nextValue;\n\n      if (this.props.onClick) {\n        this.props.onClick(nextValue);\n      }\n\n      setTimeout(function () {\n        inputNode.focus();\n\n        try {\n          inputNode.setSelectionRange(nextSelectionPosition, nextSelectionPosition);\n        } catch (e) {\n          console.error(e);\n        }\n      }, 0);\n      this.setState({\n        uppercase: this.isUppercase()\n      });\n      inputNode.dispatchEvent(new CustomEvent('input'));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          inputNode = _props2.inputNode,\n          secondaryKeyboard = _props2.secondaryKeyboard;\n      var keys = this.getKeys();\n      var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n      var symbolsKeyValue = this.getSymbolsKeyValue();\n      return _react2.default.createElement(_reactDraggable2.default, {\n        disabled: this.props.isDraggable === false,\n        defaultPosition: {\n          x: 0,\n          y: 0\n        }\n      }, _react2.default.createElement('div', {\n        className: 'keyboard keyboard-wrapper ' + (typeof this.props.keyboardClassName !== 'undefined' ? this.props.keyboardClassName : ''),\n        style: {\n          opacity: '' + (typeof this.props.opacity !== 'undefined' ? this.props.opacity : 1)\n        }\n      }, this.props.showNumericRow ? _react2.default.createElement('div', {\n        className: 'keyboard-row'\n      }, numbers.map(function (button) {\n        return _react2.default.createElement(_KeyboardButton2.default, {\n          value: button,\n          onClick: _this2.handleLetterButtonClick,\n          classes: 'keyboard-numberButton ' + _this2.getCharacterClassName(button),\n          key: button\n        });\n      }), _react2.default.createElement(_KeyboardButton2.default, {\n        classes: 'backspace-button',\n        value: _react2.default.createElement(_BackspaceIcon2.default, null),\n        onClick: this.handleBackspaceClick\n      })) : null, keys.map(function (row, i) {\n        return _react2.default.createElement('div', {\n          key: 'r' + i,\n          className: 'keyboard-row'\n        }, keys.length === i + 1 && _this2.props.showShift && _react2.default.createElement(_KeyboardButton2.default, {\n          classes: 'shift-symbols',\n          value: _react2.default.createElement(_ShiftIcon2.default, null),\n          onClick: _this2.handleShiftClick\n        }), row.map(function (button, ii) {\n          switch (button.toLowerCase()) {\n            case '*bs':\n              return _react2.default.createElement(_KeyboardButton2.default, {\n                classes: 'backspace-button',\n                value: _react2.default.createElement(_BackspaceIcon2.default, null),\n                onClick: _this2.handleBackspaceClick,\n                key: 'b' + ii\n              });\n\n            case '*sh':\n              return _react2.default.createElement(_KeyboardButton2.default, {\n                classes: 'shift-symbols',\n                value: _react2.default.createElement(_ShiftIcon2.default, null),\n                onClick: _this2.handleShiftClick,\n                key: 'b' + ii\n              });\n\n            default:\n              return _react2.default.createElement(_KeyboardButton2.default, {\n                value: button,\n                classes: _this2.getCharacterClassName(button),\n                onClick: _this2.handleLetterButtonClick,\n                key: 'b' + ii\n              });\n          }\n        }), keys.length === i + 1 && _this2.props.showSymbols && _react2.default.createElement(_KeyboardButton2.default, {\n          classes: 'shift-symbols',\n          value: symbolsKeyValue,\n          onClick: _this2.handleSymbolsClick\n        }));\n      }), _react2.default.createElement('div', {\n        className: 'keyboard-row'\n      }, typeof secondaryKeyboard !== 'undefined' ? _react2.default.createElement(_KeyboardButton2.default, {\n        value: _react2.default.createElement(_LanguageIcon2.default, null),\n        onClick: this.handleLanguageClick\n      }) : null, inputNode.dataset.type === 'email' ? _react2.default.createElement(_KeyboardButton2.default, {\n        value: '@',\n        onClick: this.handleLetterButtonClick\n      }) : null, this.props.isDraggable !== false ? _react2.default.createElement(_KeyboardButton2.default, {\n        value: _react2.default.createElement(_DraggableIcon2.default, null),\n        classes: 'keyboard-draggable-button',\n        onClick: this.handleDragKeyClick\n      }) : null, this.props.showSpacebar ? _react2.default.createElement(_KeyboardButton2.default, {\n        value: ' ',\n        classes: 'keyboard-space',\n        onClick: this.handleLetterButtonClick\n      }) : null, inputNode.dataset.type === 'email' ? _react2.default.createElement(_KeyboardButton2.default, {\n        value: '.',\n        onClick: this.handleLetterButtonClick\n      }) : null, this.props.showSubmit ? _react2.default.createElement(_KeyboardButton2.default, {\n        value: String.fromCharCode('8615'),\n        classes: 'keyboard-submit-button',\n        onClick: this.props.hideKeyboard\n      }) : null)));\n    }\n  }]);\n\n  return Keyboard;\n}(_react.PureComponent);\n\nKeyboard.propTypes = {\n  inputNode: _propTypes2.default.any.isRequired,\n  onClick: _propTypes2.default.func,\n  isFirstLetterUppercase: _propTypes2.default.bool,\n  uppercaseAfterSpace: _propTypes2.default.bool,\n  defaultKeyboard: _propTypes2.default.any,\n  secondaryKeyboard: _propTypes2.default.string,\n  hideKeyboard: _propTypes2.default.func,\n  opacity: _propTypes2.default.number,\n  isDraggable: _propTypes2.default.bool,\n  dataset: _propTypes2.default.any,\n  keyboardClassName: _propTypes2.default.any,\n  showNumericRow: _propTypes2.default.bool,\n  showShift: _propTypes2.default.bool,\n  showSymbols: _propTypes2.default.bool,\n  showSpacebar: _propTypes2.default.bool,\n  showSubmit: _propTypes2.default.bool\n};\nKeyboard.defaultProps = {\n  rightButtons: [],\n  isFirstLetterUppercase: true,\n  uppercaseAfterSpace: false,\n  isDraggable: true,\n  defaultKeyboard: 'us',\n  dataset: {\n    type: 'input'\n  },\n  showNumericRow: true,\n  showShift: true,\n  showSymbols: true,\n  showSpacebar: true,\n  showSubmit: true\n};\nexports.default = Keyboard;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}