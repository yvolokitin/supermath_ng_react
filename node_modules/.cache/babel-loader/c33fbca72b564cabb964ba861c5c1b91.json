{"ast":null,"code":"/** @const {string} */\nvar OPERATION_SUM = '+';\n/** @const {string} */\n\nvar OPERATION_SUB = '-';\n/** @const {string} */\n\nvar OPERATION_MUL = '*';\n/** @const {string} */\n\nvar OPERATION_DIV = '/';\n/** @const {string} */\n\nvar OPERATION_GREATER = '>';\n/** @const {string} */\n\nvar OPERATION_SMALLER = '<';\n/** @const {string} */\n\nvar OPERATION_EQUALLY = '=';\n/**\r\n * Returns a random number between min (inclusive) and max (inclusive)\r\n *\r\n * [0...9], [10...99], [100...999]\r\n */\n\nfunction get_rnd_int(int_min, int_max) {\n  return Math.floor(Math.random() * (int_max - int_min + 1)) + int_min;\n}\n/*\r\n    usage example:\r\n        generate_rnd_task('+', '0,9')\r\n        generate_rnd_task('+-', '0,9')\r\n*/\n\n\nexport function generate_rnd_task(operations, range) {\n  var numbers = range.split(',');\n\n  if (numbers.length < 2) {\n    alert(\"RND generator error: wrong range numbers format '\" + range + \"'\");\n    return;\n  }\n\n  if (operations.length > 1) {}\n\n  var minum = parseInt(numbers[0]);\n  var maxum = parseInt(numbers[1]);\n  var factor_1 = '1',\n      factor_2 = '1';\n\n  if (numbers.length === 4) {\n    if (numbers[2].indexOf('=') !== -1 || numbers[3].indexOf('=') !== -1) {\n      factor_1 = numbers[2];\n      factor_2 = numbers[3];\n    } else {\n      factor_1 = numbers[2];\n      factor_2 = numbers[3];\n    }\n  }\n\n  var num_1 = 0,\n      num_2 = 0,\n      res = 0;\n\n  switch (task_operation) {\n    case OPERATION_SUM:\n      num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\n      num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\n      res = num_1 + num_2;\n      break;\n\n    case OPERATION_SUB:\n      // if task_operation is '-' (minus), the first number should be\n      // >= second, i.e. result should not be negative\n      if (minum >= maxum) {\n        alert(\"RND generator error: wrong MAX and MIN ranges '\" + range + \"'\");\n        return;\n      } else {\n        // generate numbers first and only AFTER that * factor\n        num_2 = get_rnd_int(minum, maxum);\n        num_1 = get_rnd_int(num_2, maxum);\n        num_1 = parseInt(num_1 * factor_1);\n        num_2 = parseInt(num_2 * factor_2);\n        res = num_1 - num_2;\n      }\n\n      break;\n\n    case OPERATION_MUL:\n      // =10 means that num_1=10, i.e. first number should be exactly 10\n      if (factor_1.indexOf('=') !== -1) {\n        num_1 = factor_1.substr(1, factor_1.length);\n      } else {\n        num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\n      }\n\n      if (factor_2.indexOf('=') !== -1) {\n        num_2 = factor_2.substr(1, factor_2.length);\n      } else {\n        // 'yellow_1': [TYPE_MO, '*', '0,9,1,=10', 'result', 10, 'game'],\n        // 'yellow_2': [TYPE_MO, '*', '0,3', 'result', 10, 'game'],\n        // 'yellow_3': [TYPE_MO, '*', '0,7', 'result', 10, 'game'],\n        // 'yellow_4': [TYPE_MO, '*', '0,10', 'result', 10, 'game'],\n        // 'yellow_5': [TYPE_MO, '/', '0,9,10,=10', 'result', 10, 'game'],\n        // 'yellow_6': [TYPE_MO, '/', '1,3', 'result', 10, 'game'],\n        // 'yellow_7': [TYPE_MO, '/', '1,7', 'result', 10, 'game'],\n        // 'yellow_8': [TYPE_MO, '/', '1,10', 'result', 10, 'game'],\n        // 'yellow_9': [TYPE_CO, '*/', '0,9', 'operation', 10, 'game'],\n        // 'yellow_10': [TYPE_MO, '*', '1,10', 'number_2', 10, 'game'],\n        // 'yellow_11': [TYPE_MO, '/', '1,10', 'number_2', 10, 'game'],\n        // 'yellow_12': [TYPE_MO, '*/', '1,10', 'result', 10, 'game'],\n        if (numbers.length === 2) {\n          if (maxum < 10) {\n            maxum = 10;\n          }\n        }\n\n        num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\n      }\n\n      res = num_1 * num_2;\n      break;\n\n    case OPERATION_DIV:\n      // /\n      // =10 means that num_1=10, i.e. first number should be exactly 10\n      if (factor_2.indexOf('=') !== -1) {\n        num_2 = factor_2.substr(1, factor_2.length);\n      } else {\n        if (minum === 0) {\n          minum = 1;\n        }\n\n        num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\n      }\n\n      res = parseInt(get_rnd_int(minum, maxum));\n      num_1 = res * num_2;\n      break;\n\n    case OPERATION_GREATER:\n      // >\n      res = '>';\n      num_1 = parseInt(get_rnd_int(minum + 1, maxum) * factor_1);\n      num_2 = parseInt(get_rnd_int(minum, num_1 - 1) * factor_2);\n      break;\n\n    case OPERATION_SMALLER:\n      // <\n      res = '<';\n      num_1 = parseInt(get_rnd_int(minum, maxum - 1) * factor_1);\n      num_2 = parseInt(get_rnd_int(num_1 + 1, maxum) * factor_2);\n      break;\n\n    case OPERATION_EQUALLY:\n      // =\n      res = '=';\n      num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\n      num_2 = num_1;\n      break;\n\n    default:\n      alert(\"RND generator error: Unknown math task_operation '\" + task_operation + \"'\");\n      return;\n  }\n\n  if (task_operation === OPERATION_SUM || task_operation === OPERATION_SUB || task_operation === OPERATION_MUL || task_operation === OPERATION_DIV) {\n    // randomNumber is true => swap num_1 & num_2\n    var randomNumber = Math.random() >= 0.5;\n\n    if (randomNumber) {\n      var tmp = num_1;\n      num_1 = num_2;\n      num_2 = tmp;\n    }\n  }\n\n  return {\n    'number_1': num_1,\n    'number_2': num_2,\n    'operation': task_operation,\n    'result': res\n  };\n}","map":{"version":3,"sources":["E:/supermath_ng/supermath_ng_react/src/components/halpers/functions.js"],"names":["OPERATION_SUM","OPERATION_SUB","OPERATION_MUL","OPERATION_DIV","OPERATION_GREATER","OPERATION_SMALLER","OPERATION_EQUALLY","get_rnd_int","int_min","int_max","Math","floor","random","generate_rnd_task","operations","range","numbers","split","length","alert","minum","parseInt","maxum","factor_1","factor_2","indexOf","num_1","num_2","res","task_operation","substr","randomNumber","tmp"],"mappings":"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","sourcesContent":["/** @const {string} */\r\nvar OPERATION_SUM = '+';\r\n/** @const {string} */\r\nvar OPERATION_SUB = '-';\r\n/** @const {string} */\r\nvar OPERATION_MUL = '*';\r\n/** @const {string} */\r\nvar OPERATION_DIV = '/';\r\n\r\n/** @const {string} */\r\nvar OPERATION_GREATER = '>';\r\n/** @const {string} */\r\nvar OPERATION_SMALLER = '<';\r\n/** @const {string} */\r\nvar OPERATION_EQUALLY = '=';\r\n\r\n/**\r\n * Returns a random number between min (inclusive) and max (inclusive)\r\n *\r\n * [0...9], [10...99], [100...999]\r\n */\r\nfunction get_rnd_int(int_min, int_max) {\r\n    return Math.floor(Math.random() * (int_max - int_min + 1)) + int_min;\r\n}\r\n\r\n/*\r\n    usage example:\r\n        generate_rnd_task('+', '0,9')\r\n        generate_rnd_task('+-', '0,9')\r\n*/\r\nexport function generate_rnd_task(operations, range) {\r\n    var numbers = range.split(',');\r\n    if (numbers.length < 2) {\r\n        alert(\"RND generator error: wrong range numbers format '\" + range + \"'\");\r\n        return;\r\n    }\r\n\r\n    if (operations.length > 1) {\r\n    }\r\n        \r\n      var minum = parseInt(numbers[0]);\r\n      var maxum = parseInt(numbers[1]);\r\n      var factor_1 = '1', factor_2 = '1';\r\n      if (numbers.length === 4) {\r\n        if ((numbers[2].indexOf('=') !== -1) ||\r\n            (numbers[3].indexOf('=') !== -1)) {\r\n          factor_1 = numbers[2]; factor_2 = numbers[3];\r\n        } else {\r\n          factor_1 = numbers[2];\r\n          factor_2 = numbers[3];\r\n        }\r\n      }\r\n\r\n      var num_1 = 0, num_2 = 0, res = 0;\r\n      switch (task_operation) {\r\n        case OPERATION_SUM:\r\n            num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\r\n            num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\r\n            res = num_1 + num_2;\r\n        break;\r\n\r\n        case OPERATION_SUB:\r\n            // if task_operation is '-' (minus), the first number should be\r\n            // >= second, i.e. result should not be negative\r\n            if (minum >= maxum) {\r\n                alert(\"RND generator error: wrong MAX and MIN ranges '\" + range + \"'\");\r\n                return;\r\n            } else {\r\n                // generate numbers first and only AFTER that * factor\r\n                num_2 = get_rnd_int(minum, maxum);\r\n                num_1 = get_rnd_int(num_2, maxum);\r\n\r\n                num_1 = parseInt(num_1 * factor_1);\r\n                num_2 = parseInt(num_2 * factor_2);\r\n\r\n                res = num_1 - num_2;\r\n            }\r\n        break;\r\n\r\n        case OPERATION_MUL:\r\n            // =10 means that num_1=10, i.e. first number should be exactly 10\r\n            if (factor_1.indexOf('=') !== -1) {\r\n              num_1 = factor_1.substr(1, factor_1.length);\r\n            } else {\r\n              num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\r\n            }\r\n\r\n            if (factor_2.indexOf('=') !== -1) {\r\n              num_2 = factor_2.substr(1, factor_2.length);\r\n            } else {\r\n              // 'yellow_1': [TYPE_MO, '*', '0,9,1,=10', 'result', 10, 'game'],\r\n              // 'yellow_2': [TYPE_MO, '*', '0,3', 'result', 10, 'game'],\r\n              // 'yellow_3': [TYPE_MO, '*', '0,7', 'result', 10, 'game'],\r\n              // 'yellow_4': [TYPE_MO, '*', '0,10', 'result', 10, 'game'],\r\n              // 'yellow_5': [TYPE_MO, '/', '0,9,10,=10', 'result', 10, 'game'],\r\n              // 'yellow_6': [TYPE_MO, '/', '1,3', 'result', 10, 'game'],\r\n              // 'yellow_7': [TYPE_MO, '/', '1,7', 'result', 10, 'game'],\r\n              // 'yellow_8': [TYPE_MO, '/', '1,10', 'result', 10, 'game'],\r\n              // 'yellow_9': [TYPE_CO, '*/', '0,9', 'operation', 10, 'game'],\r\n              // 'yellow_10': [TYPE_MO, '*', '1,10', 'number_2', 10, 'game'],\r\n              // 'yellow_11': [TYPE_MO, '/', '1,10', 'number_2', 10, 'game'],\r\n              // 'yellow_12': [TYPE_MO, '*/', '1,10', 'result', 10, 'game'],\r\n              if (numbers.length === 2) {\r\n                if (maxum < 10) {\r\n                    maxum = 10;\r\n                }\r\n              }\r\n              num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\r\n            }\r\n\r\n            res = num_1 * num_2;\r\n        break;\r\n\r\n        case OPERATION_DIV: // /\r\n            // =10 means that num_1=10, i.e. first number should be exactly 10\r\n            if (factor_2.indexOf('=') !== -1) {\r\n              num_2 = factor_2.substr(1, factor_2.length);\r\n            } else {\r\n              if (minum === 0) {minum=1;}\r\n              num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\r\n            }\r\n\r\n            res = parseInt(get_rnd_int(minum, maxum));\r\n            num_1 = res * num_2;\r\n        break;\r\n\r\n        case OPERATION_GREATER: // >\r\n          res = '>';\r\n          num_1 = parseInt(get_rnd_int(minum+1, maxum) * factor_1);\r\n          num_2 = parseInt(get_rnd_int(minum, num_1-1) * factor_2);\r\n        break;\r\n\r\n        case OPERATION_SMALLER: // <\r\n          res = '<';\r\n          num_1 = parseInt(get_rnd_int(minum, maxum-1) * factor_1);\r\n          num_2 = parseInt(get_rnd_int(num_1+1, maxum) * factor_2);\r\n        break;\r\n\r\n        case OPERATION_EQUALLY: // =\r\n          res = '=';\r\n          num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\r\n          num_2 = num_1;\r\n        break;\r\n\r\n        default:\r\n          alert(\"RND generator error: Unknown math task_operation '\" + task_operation + \"'\");\r\n          return;\r\n      }\r\n\r\n      if ((task_operation === OPERATION_SUM) ||\r\n          (task_operation === OPERATION_SUB) ||\r\n          (task_operation === OPERATION_MUL) ||\r\n          (task_operation === OPERATION_DIV)) {\r\n        // randomNumber is true => swap num_1 & num_2\r\n        var randomNumber = Math.random() >= 0.5;\r\n        if (randomNumber) {\r\n            var tmp = num_1; num_1 = num_2; num_2 = tmp;\r\n        }\r\n      }\r\n\r\n      return {'number_1': num_1,\r\n              'number_2': num_2,\r\n              'operation': task_operation,\r\n              'result': res};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}