{"ast":null,"code":"/** @const {string} */var OPERATION_SUM='+';/** @const {string} */var OPERATION_SUB='-';/** @const {string} */var OPERATION_MUL='*';/** @const {string} */var OPERATION_DIV='/';/** @const {string} */var OPERATION_GREATER='>';/** @const {string} */var OPERATION_SMALLER='<';/** @const {string} */var OPERATION_EQUALLY='=';/**\n * Returns a random number between min (inclusive) and max (inclusive)\n *\n * [0...9], [10...99], [100...999]\n */function get_rnd_int(int_min,int_max){return Math.floor(Math.random()*(int_max-int_min+1))+int_min;}/*\n    usage example:\n        generate_rnd_task('+', '0,9')\n        generate_rnd_task('+-', '0,10')\n        generate_rnd_task('+-', '0,100')\n*/export function generate_rnd_task(operations,range){var numbers=range.split(',');if(numbers.length<2){alert(\"RND generator error: wrong range numbers format '\"+range+\"'\");return;}var operation='';if(operations.length===1){operation=operations;}else{var array=operations.split('');operation=array[get_rnd_int(0,array.length-1)];}var minum=parseInt(numbers[0]);var maxum=parseInt(numbers[1]);var factor_1='1',factor_2='1';if(numbers.length===4){if(numbers[2].indexOf('=')!==-1||numbers[3].indexOf('=')!==-1){factor_1=numbers[2];factor_2=numbers[3];}else{factor_1=numbers[2];factor_2=numbers[3];}}var num_1=0,num_2=0,res=0;switch(operation){case OPERATION_SUM:num_1=parseInt(get_rnd_int(minum,maxum)*factor_1);num_2=parseInt(get_rnd_int(minum,maxum)*factor_2);res=num_1+num_2;break;case OPERATION_SUB:// if operation is '-' (minus), the first number should be\n// >= second, i.e. result should not be negative\nif(minum>=maxum){alert(\"RND generator error: wrong MAX and MIN ranges '\"+range+\"'\");return;}else{// generate numbers first and only AFTER that * factor\nnum_2=get_rnd_int(minum,maxum);num_1=get_rnd_int(num_2,maxum);num_1=parseInt(num_1*factor_1);num_2=parseInt(num_2*factor_2);res=num_1-num_2;}break;case OPERATION_MUL:// =10 means that num_1=10, i.e. first number should be exactly 10\nif(factor_1.indexOf('=')!==-1){num_1=factor_1.substr(1,factor_1.length);}else{num_1=parseInt(get_rnd_int(minum,maxum)*factor_1);}if(factor_2.indexOf('=')!==-1){num_2=factor_2.substr(1,factor_2.length);}else{// 'yellow_1': [TYPE_MO, '*', '0,9,1,=10', 'result', 10, 'game'],\n// 'yellow_2': [TYPE_MO, '*', '0,3', 'result', 10, 'game'],\n// 'yellow_3': [TYPE_MO, '*', '0,7', 'result', 10, 'game'],\n// 'yellow_4': [TYPE_MO, '*', '0,10', 'result', 10, 'game'],\n// 'yellow_5': [TYPE_MO, '/', '0,9,10,=10', 'result', 10, 'game'],\n// 'yellow_6': [TYPE_MO, '/', '1,3', 'result', 10, 'game'],\n// 'yellow_7': [TYPE_MO, '/', '1,7', 'result', 10, 'game'],\n// 'yellow_8': [TYPE_MO, '/', '1,10', 'result', 10, 'game'],\n// 'yellow_9': [TYPE_CO, '*/', '0,9', 'operation', 10, 'game'],\n// 'yellow_10': [TYPE_MO, '*', '1,10', 'number_2', 10, 'game'],\n// 'yellow_11': [TYPE_MO, '/', '1,10', 'number_2', 10, 'game'],\n// 'yellow_12': [TYPE_MO, '*/', '1,10', 'result', 10, 'game'],\nif(numbers.length===2){if(maxum<10){maxum=10;}}num_2=parseInt(get_rnd_int(minum,maxum)*factor_2);}res=num_1*num_2;break;case OPERATION_DIV:// /\n// =10 means that num_1=10, i.e. first number should be exactly 10\nif(factor_2.indexOf('=')!==-1){num_2=factor_2.substr(1,factor_2.length);}else{if(minum===0){minum=1;}num_2=parseInt(get_rnd_int(minum,maxum)*factor_2);}res=parseInt(get_rnd_int(minum,maxum));num_1=res*num_2;break;case OPERATION_GREATER:// >\nres='>';num_1=parseInt(get_rnd_int(minum+1,maxum)*factor_1);num_2=parseInt(get_rnd_int(minum,num_1-1)*factor_2);break;case OPERATION_SMALLER:// <\nres='<';num_1=parseInt(get_rnd_int(minum,maxum-1)*factor_1);num_2=parseInt(get_rnd_int(num_1+1,maxum)*factor_2);break;case OPERATION_EQUALLY:// =\nres='=';num_1=parseInt(get_rnd_int(minum,maxum)*factor_1);num_2=num_1;break;default:alert(\"RND generator error: Unknown math operation '\"+operation+\"'\");return;}/*\n      if ((operation === OPERATION_SUM) ||\n          (operation === OPERATION_SUB) ||\n          (operation === OPERATION_MUL) ||\n          (operation === OPERATION_DIV)) {\n        // randomNumber is true => swap num_1 & num_2\n        var randomNumber = Math.random() >= 0.5;\n        if (randomNumber) {\n            var tmp = num_1; num_1 = num_2; num_2 = tmp;\n        }\n      }\n*/return{'number_1':num_1,'number_2':num_2,'operation':operation,'result':res};}","map":{"version":3,"sources":["E:/supermath_ng/supermath_ng_react/src/components/halpers/functions.js"],"names":["OPERATION_SUM","OPERATION_SUB","OPERATION_MUL","OPERATION_DIV","OPERATION_GREATER","OPERATION_SMALLER","OPERATION_EQUALLY","get_rnd_int","int_min","int_max","Math","floor","random","generate_rnd_task","operations","range","numbers","split","length","alert","operation","array","minum","parseInt","maxum","factor_1","factor_2","indexOf","num_1","num_2","res","substr"],"mappings":"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","sourcesContent":["/** @const {string} */\nvar OPERATION_SUM = '+';\n/** @const {string} */\nvar OPERATION_SUB = '-';\n/** @const {string} */\nvar OPERATION_MUL = '*';\n/** @const {string} */\nvar OPERATION_DIV = '/';\n\n/** @const {string} */\nvar OPERATION_GREATER = '>';\n/** @const {string} */\nvar OPERATION_SMALLER = '<';\n/** @const {string} */\nvar OPERATION_EQUALLY = '=';\n\n/**\n * Returns a random number between min (inclusive) and max (inclusive)\n *\n * [0...9], [10...99], [100...999]\n */\nfunction get_rnd_int(int_min, int_max) {\n    return Math.floor(Math.random() * (int_max - int_min + 1)) + int_min;\n}\n\n/*\n    usage example:\n        generate_rnd_task('+', '0,9')\n        generate_rnd_task('+-', '0,10')\n        generate_rnd_task('+-', '0,100')\n*/\nexport function generate_rnd_task(operations, range) {\n    var numbers = range.split(',');\n    if (numbers.length < 2) {\n        alert(\"RND generator error: wrong range numbers format '\" + range + \"'\");\n        return;\n    }\n\n    var operation = '';\n    if (operations.length === 1) {\n        operation = operations;\n    } else {\n        var array = operations.split('');\n        operation = array[get_rnd_int(0, array.length-1)];\n    }\n        \n    var minum = parseInt(numbers[0]);\n    var maxum = parseInt(numbers[1]);\n    var factor_1 = '1', factor_2 = '1';\n    if (numbers.length === 4) {\n        if ((numbers[2].indexOf('=') !== -1) ||\n            (numbers[3].indexOf('=') !== -1)) {\n            factor_1 = numbers[2]; factor_2 = numbers[3];\n        } else {\n            factor_1 = numbers[2];\n            factor_2 = numbers[3];\n        }\n    }\n\n    var num_1 = 0, num_2 = 0, res = 0;\n    switch (operation) {\n        case OPERATION_SUM:\n            num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\n            num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\n            res = num_1 + num_2;\n        break;\n\n        case OPERATION_SUB:\n            // if operation is '-' (minus), the first number should be\n            // >= second, i.e. result should not be negative\n            if (minum >= maxum) {\n                alert(\"RND generator error: wrong MAX and MIN ranges '\" + range + \"'\");\n                return;\n            } else {\n                // generate numbers first and only AFTER that * factor\n                num_2 = get_rnd_int(minum, maxum);\n                num_1 = get_rnd_int(num_2, maxum);\n\n                num_1 = parseInt(num_1 * factor_1);\n                num_2 = parseInt(num_2 * factor_2);\n\n                res = num_1 - num_2;\n            }\n        break;\n\n        case OPERATION_MUL:\n            // =10 means that num_1=10, i.e. first number should be exactly 10\n            if (factor_1.indexOf('=') !== -1) {\n              num_1 = factor_1.substr(1, factor_1.length);\n            } else {\n              num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\n            }\n\n            if (factor_2.indexOf('=') !== -1) {\n              num_2 = factor_2.substr(1, factor_2.length);\n            } else {\n              // 'yellow_1': [TYPE_MO, '*', '0,9,1,=10', 'result', 10, 'game'],\n              // 'yellow_2': [TYPE_MO, '*', '0,3', 'result', 10, 'game'],\n              // 'yellow_3': [TYPE_MO, '*', '0,7', 'result', 10, 'game'],\n              // 'yellow_4': [TYPE_MO, '*', '0,10', 'result', 10, 'game'],\n              // 'yellow_5': [TYPE_MO, '/', '0,9,10,=10', 'result', 10, 'game'],\n              // 'yellow_6': [TYPE_MO, '/', '1,3', 'result', 10, 'game'],\n              // 'yellow_7': [TYPE_MO, '/', '1,7', 'result', 10, 'game'],\n              // 'yellow_8': [TYPE_MO, '/', '1,10', 'result', 10, 'game'],\n              // 'yellow_9': [TYPE_CO, '*/', '0,9', 'operation', 10, 'game'],\n              // 'yellow_10': [TYPE_MO, '*', '1,10', 'number_2', 10, 'game'],\n              // 'yellow_11': [TYPE_MO, '/', '1,10', 'number_2', 10, 'game'],\n              // 'yellow_12': [TYPE_MO, '*/', '1,10', 'result', 10, 'game'],\n              if (numbers.length === 2) {\n                if (maxum < 10) {\n                    maxum = 10;\n                }\n              }\n              num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\n            }\n\n            res = num_1 * num_2;\n        break;\n\n        case OPERATION_DIV: // /\n            // =10 means that num_1=10, i.e. first number should be exactly 10\n            if (factor_2.indexOf('=') !== -1) {\n              num_2 = factor_2.substr(1, factor_2.length);\n            } else {\n              if (minum === 0) {minum=1;}\n              num_2 = parseInt(get_rnd_int(minum, maxum) * factor_2);\n            }\n\n            res = parseInt(get_rnd_int(minum, maxum));\n            num_1 = res * num_2;\n        break;\n\n        case OPERATION_GREATER: // >\n          res = '>';\n          num_1 = parseInt(get_rnd_int(minum+1, maxum) * factor_1);\n          num_2 = parseInt(get_rnd_int(minum, num_1-1) * factor_2);\n        break;\n\n        case OPERATION_SMALLER: // <\n          res = '<';\n          num_1 = parseInt(get_rnd_int(minum, maxum-1) * factor_1);\n          num_2 = parseInt(get_rnd_int(num_1+1, maxum) * factor_2);\n        break;\n\n        case OPERATION_EQUALLY: // =\n          res = '=';\n          num_1 = parseInt(get_rnd_int(minum, maxum) * factor_1);\n          num_2 = num_1;\n        break;\n\n        default:\n          alert(\"RND generator error: Unknown math operation '\" + operation + \"'\");\n          return;\n      }\n\n/*\n      if ((operation === OPERATION_SUM) ||\n          (operation === OPERATION_SUB) ||\n          (operation === OPERATION_MUL) ||\n          (operation === OPERATION_DIV)) {\n        // randomNumber is true => swap num_1 & num_2\n        var randomNumber = Math.random() >= 0.5;\n        if (randomNumber) {\n            var tmp = num_1; num_1 = num_2; num_2 = tmp;\n        }\n      }\n*/\n      return {'number_1': num_1,\n              'number_2': num_2,\n              'operation': operation,\n              'result': res};\n}\n"]},"metadata":{},"sourceType":"module"}